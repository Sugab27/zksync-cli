diff --git a/.eslintrc b/.eslintrc
index 561b3df..1a96ec8 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -2,6 +2,7 @@
   "extends": ["@matterlabs/eslint-config-typescript"],
   "rules": {
     "no-multiple-empty-lines": ["error", { "max": 1 }],
-    "@typescript-eslint/no-namespace": "off"
+    "@typescript-eslint/no-namespace": "off",
+    "import/no-named-as-default-member": "off"
   }
 }
\ No newline at end of file
diff --git a/README.md b/README.md
index 0811a3b..375902c 100644
--- a/README.md
+++ b/README.md
@@ -40,6 +40,7 @@ You can install this program globally with `npm i -g zksync-cli` or run the comm
 - `zksync-cli local` - All-in-one tool for local zkSync development. It supports a set of sub-subcommands:
   - `zksync-cli local start` - start local setup (will ask to configure if starting for the first time)
   - `zksync-cli local stop` - stop currently running modules
+  - `zksync-cli local restart` - restart config modules
   - `zksync-cli local clean` - clean data for all modules
   - `zksync-cli local config` - setup new config for local setup (select modules)
 
diff --git a/package-lock.json b/package-lock.json
index 55d2c6d..0f34b36 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -15,6 +15,7 @@
         "commander": "^11.0.0",
         "cross-env": "^7.0.3",
         "dotenv": "^16.3.1",
+        "eslint-import-resolver-typescript": "^3.6.1",
         "ethers": "5.7.2",
         "inquirer": "^8.1.4",
         "node-machine-id": "^1.1.12",
@@ -47,14 +48,13 @@
         "ts-jest": "^29.1.1",
         "ts-node": "^10.9.1",
         "tsc-files": "^1.1.4",
-        "typescript": "^4.9.5"
+        "typescript": "^5.2.2"
       }
     },
     "node_modules/@aashutoshrathi/word-wrap": {
       "version": "1.2.6",
       "resolved": "https://registry.npmjs.org/@aashutoshrathi/word-wrap/-/word-wrap-1.2.6.tgz",
       "integrity": "sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">=0.10.0"
@@ -1199,7 +1199,6 @@
       "version": "4.4.0",
       "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
       "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "eslint-visitor-keys": "^3.3.0"
@@ -1215,7 +1214,6 @@
       "version": "4.8.0",
       "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.8.0.tgz",
       "integrity": "sha512-JylOEEzDiOryeUnFbQz+oViCXS0KsvR1mvHkoMiu5+UiBvy+RYX7tzlIIIEstF/gVa2tj9AQXk3dgnxv6KxhFg==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
@@ -1225,7 +1223,6 @@
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.2.tgz",
       "integrity": "sha512-+wvgpDsrB1YqAMdEUCcnTlpfVBH7Vqn6A/NT3D8WVXFIaKMlErPIZT3oCIAVCOtarRpMtelZLqJeU3t7WY6X6g==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "ajv": "^6.12.4",
@@ -1249,7 +1246,6 @@
       "version": "8.48.0",
       "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.48.0.tgz",
       "integrity": "sha512-ZSjtmelB7IJfWD2Fvb7+Z+ChTIKWq6kjda95fLcQKNS5aheVHn4IkfgRQE3sIIzTcSLwLcLZUD9UBt+V7+h+Pw==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
@@ -1930,7 +1926,6 @@
       "version": "0.11.11",
       "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.11.tgz",
       "integrity": "sha512-N2brEuAadi0CcdeMXUkhbZB84eskAc8MEX1By6qEchoVywSgXPIjou4rYsl0V3Hj0ZnuGycGCjdNgockbzeWNA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "@humanwhocodes/object-schema": "^1.2.1",
@@ -1945,7 +1940,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
       "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">=12.22"
@@ -1959,7 +1953,6 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
       "integrity": "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
-      "dev": true,
       "peer": true
     },
     "node_modules/@ioredis/commands": {
@@ -2569,7 +2562,6 @@
       "version": "2.1.5",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
       "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
-      "dev": true,
       "dependencies": {
         "@nodelib/fs.stat": "2.0.5",
         "run-parallel": "^1.1.9"
@@ -2582,7 +2574,6 @@
       "version": "2.0.5",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
       "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
-      "dev": true,
       "engines": {
         "node": ">= 8"
       }
@@ -2591,7 +2582,6 @@
       "version": "1.2.8",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
       "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
-      "dev": true,
       "dependencies": {
         "@nodelib/fs.scandir": "2.1.5",
         "fastq": "^1.6.0"
@@ -3260,7 +3250,6 @@
       "version": "0.0.29",
       "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
       "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
-      "dev": true,
       "peer": true
     },
     "node_modules/@types/minimist": {
@@ -3561,7 +3550,6 @@
       "version": "8.10.0",
       "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
       "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==",
-      "dev": true,
       "bin": {
         "acorn": "bin/acorn"
       },
@@ -3573,7 +3561,6 @@
       "version": "5.3.2",
       "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
       "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
-      "dev": true,
       "peer": true,
       "peerDependencies": {
         "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
@@ -3622,7 +3609,6 @@
       "version": "6.12.6",
       "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
       "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "fast-deep-equal": "^3.1.1",
@@ -3699,8 +3685,7 @@
     "node_modules/argparse": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
-      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
-      "dev": true
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q=="
     },
     "node_modules/argv-formatter": {
       "version": "1.0.0",
@@ -3712,7 +3697,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.0.tgz",
       "integrity": "sha512-LPuwb2P+NrQw3XhxGc36+XSvuBPopovXYTR9Ew++Du9Yb/bx5AzBfrIsBoj0EZUifjQU+sHL21sseZ3jerWO/A==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -3732,7 +3716,6 @@
       "version": "3.1.6",
       "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.6.tgz",
       "integrity": "sha512-sgTbLvL6cNnw24FnbaDyjmvddQ2ML8arZsgaJhoABMoplz/4QRhtrYS+alr1BUM1Bwp6dhx8vVCBSLG+StwOFw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -3761,7 +3744,6 @@
       "version": "1.2.2",
       "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.2.tgz",
       "integrity": "sha512-tb5thFFlUcp7NdNF6/MpDk/1r/4awWG1FIz3YqDf+/zJSTezBb+/5WViH41obXULHVpDzoiCLpJ/ZO9YbJMsdw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -3781,7 +3763,6 @@
       "version": "1.3.1",
       "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.1.tgz",
       "integrity": "sha512-roTU0KWIOmJ4DRLmwKd19Otg0/mT3qPNt0Qb3GWW8iObuZXxrjB/pzn0R3hqpRSWg4HCwqx+0vwOnWnvlOyeIA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -3800,7 +3781,6 @@
       "version": "1.3.1",
       "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.1.tgz",
       "integrity": "sha512-8UGn9O1FDVvMNB0UlLv4voxRMze7+FpHyF5mSMRjWHUMlpoDViniy05870VlxhfgTnLbpuwTzvD76MTtWxB/mQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -3819,7 +3799,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.1.tgz",
       "integrity": "sha512-09x0ZWFEjj4WD8PDbykUwo3t9arLn8NIzmmYEJFpYekOAQjpkGSyrQhNoRTcwwcFRu+ycWF78QZ63oWTqSjBcw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "array-buffer-byte-length": "^1.0.0",
@@ -3859,7 +3838,6 @@
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.5.tgz",
       "integrity": "sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==",
-      "dev": true,
       "engines": {
         "node": ">= 0.4"
       },
@@ -4005,8 +3983,7 @@
     "node_modules/balanced-match": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
-      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
-      "dev": true
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
     },
     "node_modules/base64-js": {
       "version": "1.5.1",
@@ -4095,7 +4072,6 @@
       "version": "1.1.11",
       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
       "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
       "dependencies": {
         "balanced-match": "^1.0.0",
         "concat-map": "0.0.1"
@@ -4105,7 +4081,6 @@
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
       "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
-      "dev": true,
       "dependencies": {
         "fill-range": "^7.0.1"
       },
@@ -4253,7 +4228,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
       "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
-      "dev": true,
       "dependencies": {
         "function-bind": "^1.1.1",
         "get-intrinsic": "^1.0.2"
@@ -4266,7 +4240,6 @@
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
       "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
-      "dev": true,
       "engines": {
         "node": ">=6"
       }
@@ -4693,8 +4666,7 @@
     "node_modules/concat-map": {
       "version": "0.0.1",
       "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
-      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
-      "dev": true
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
     },
     "node_modules/conventional-changelog-angular": {
       "version": "6.0.0",
@@ -5018,7 +4990,6 @@
       "version": "4.3.4",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
       "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
-      "devOptional": true,
       "dependencies": {
         "ms": "2.1.2"
       },
@@ -5034,8 +5005,7 @@
     "node_modules/debug/node_modules/ms": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
-      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
-      "devOptional": true
+      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
     },
     "node_modules/debuglog": {
       "version": "1.0.1",
@@ -5108,7 +5078,6 @@
       "version": "0.1.4",
       "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
       "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
-      "dev": true,
       "peer": true
     },
     "node_modules/deepmerge": {
@@ -5184,7 +5153,6 @@
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.0.tgz",
       "integrity": "sha512-xvqAVKGfT1+UAvPwKTVw/njhdQ8ZhXK4lI0bCIuCMrp2up9nPnaDftrLtmpTazqd1o+UY4zgzU+avtMbDP+ldA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "has-property-descriptors": "^1.0.0",
@@ -5300,7 +5268,6 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
       "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "esutils": "^2.0.2"
@@ -5430,6 +5397,18 @@
       "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
       "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ=="
     },
+    "node_modules/enhanced-resolve": {
+      "version": "5.15.0",
+      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.15.0.tgz",
+      "integrity": "sha512-LXYT42KJ7lpIKECr2mAXIaMldcNCh/7E0KBKOu4KSfkHmP+mZmSs+8V5gBAqisWBy0OO4W5Oyys0GO1Y8KtdKg==",
+      "dependencies": {
+        "graceful-fs": "^4.2.4",
+        "tapable": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
     "node_modules/env-ci": {
       "version": "5.5.0",
       "resolved": "https://registry.npmjs.org/env-ci/-/env-ci-5.5.0.tgz",
@@ -5516,7 +5495,6 @@
       "version": "1.22.1",
       "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.22.1.tgz",
       "integrity": "sha512-ioRRcXMO6OFyRpyzV3kE1IIBd4WG5/kltnzdxSCqoP8CMGs/Li+M1uF5o7lOkZVFjDs+NLesthnF66Pg/0q0Lw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "array-buffer-byte-length": "^1.0.0",
@@ -5570,7 +5548,6 @@
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.0.1.tgz",
       "integrity": "sha512-g3OMbtlwY3QewlqAiMLI47KywjWZoEytKr8pf6iTC8uJq5bIAH52Z9pnQ8pVL6whrCto53JZDuUIsifGeLorTg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "get-intrinsic": "^1.1.3",
@@ -5585,7 +5562,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.0.0.tgz",
       "integrity": "sha512-Jm6GPcCdC30eMLbZ2x8z2WuRwAws3zTBBKuusffYVUrNj/GVSUAZ+xKMaUpfNDR5IbyNA5LJbaecoUVbmUcB1w==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "has": "^1.0.3"
@@ -5595,7 +5571,6 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz",
       "integrity": "sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "is-callable": "^1.1.4",
@@ -5630,7 +5605,6 @@
       "version": "8.48.0",
       "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.48.0.tgz",
       "integrity": "sha512-sb6DLeIuRXxeM1YljSe1KEx9/YYeZFQWcV8Rq9HfigmdDEugjLEVEa1ozDjL6YDjBpQHPJxJzze+alxi4T3OLg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "@eslint-community/eslint-utils": "^4.2.0",
@@ -5685,7 +5659,6 @@
       "version": "0.3.9",
       "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
       "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "debug": "^3.2.7",
@@ -5697,18 +5670,39 @@
       "version": "3.2.7",
       "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
       "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "ms": "^2.1.1"
       }
     },
+    "node_modules/eslint-import-resolver-typescript": {
+      "version": "3.6.1",
+      "resolved": "https://registry.npmjs.org/eslint-import-resolver-typescript/-/eslint-import-resolver-typescript-3.6.1.tgz",
+      "integrity": "sha512-xgdptdoi5W3niYeuQxKmzVDTATvLYqhpwmykwsh7f6HIOStGWEIL9iqZgQDF9u9OEzrRwR8no5q2VT+bjAujTg==",
+      "dependencies": {
+        "debug": "^4.3.4",
+        "enhanced-resolve": "^5.12.0",
+        "eslint-module-utils": "^2.7.4",
+        "fast-glob": "^3.3.1",
+        "get-tsconfig": "^4.5.0",
+        "is-core-module": "^2.11.0",
+        "is-glob": "^4.0.3"
+      },
+      "engines": {
+        "node": "^14.18.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/unts/projects/eslint-import-resolver-ts"
+      },
+      "peerDependencies": {
+        "eslint": "*",
+        "eslint-plugin-import": "*"
+      }
+    },
     "node_modules/eslint-module-utils": {
       "version": "2.8.0",
       "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.8.0.tgz",
       "integrity": "sha512-aWajIYfsqCKRDgUfjEXNN/JlrzauMuSEy5sbd7WXbtW3EH6A6MpwEh42c7qD+MqQo9QMJ6fWLAeIJynx0g6OAw==",
-      "dev": true,
-      "peer": true,
       "dependencies": {
         "debug": "^3.2.7"
       },
@@ -5725,8 +5719,6 @@
       "version": "3.2.7",
       "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
       "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
-      "dev": true,
-      "peer": true,
       "dependencies": {
         "ms": "^2.1.1"
       }
@@ -5735,7 +5727,6 @@
       "version": "2.28.1",
       "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.28.1.tgz",
       "integrity": "sha512-9I9hFlITvOV55alzoKBI+K9q74kv0iKMeY6av5+umsNwayt59fz692daGyjR+oStBQgx6nwR9rXldDev3Clw+A==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "array-includes": "^3.1.6",
@@ -5767,7 +5758,6 @@
       "version": "3.2.7",
       "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
       "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "ms": "^2.1.1"
@@ -5777,7 +5767,6 @@
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
       "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "esutils": "^2.0.2"
@@ -5790,7 +5779,6 @@
       "version": "6.3.1",
       "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
       "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
-      "dev": true,
       "peer": true,
       "bin": {
         "semver": "bin/semver.js"
@@ -5830,7 +5818,6 @@
       "version": "7.2.2",
       "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
       "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "esrecurse": "^4.3.0",
@@ -5847,7 +5834,6 @@
       "version": "3.4.3",
       "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
       "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
@@ -5860,7 +5846,6 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
       "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">=10"
@@ -5873,7 +5858,6 @@
       "version": "9.6.1",
       "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
       "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "acorn": "^8.9.0",
@@ -5904,7 +5888,6 @@
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.5.0.tgz",
       "integrity": "sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "estraverse": "^5.1.0"
@@ -5917,7 +5900,6 @@
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
       "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "estraverse": "^5.2.0"
@@ -5930,7 +5912,6 @@
       "version": "5.3.0",
       "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
       "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">=4.0"
@@ -5940,7 +5921,6 @@
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
       "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">=0.10.0"
@@ -6111,8 +6091,7 @@
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
-      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
-      "dev": true
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
     },
     "node_modules/fast-diff": {
       "version": "1.3.0",
@@ -6125,7 +6104,6 @@
       "version": "3.3.1",
       "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.1.tgz",
       "integrity": "sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==",
-      "dev": true,
       "dependencies": {
         "@nodelib/fs.stat": "^2.0.2",
         "@nodelib/fs.walk": "^1.2.3",
@@ -6141,7 +6119,6 @@
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
       "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
-      "dev": true,
       "dependencies": {
         "is-glob": "^4.0.1"
       },
@@ -6152,21 +6129,18 @@
     "node_modules/fast-json-stable-stringify": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
-      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
-      "dev": true
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
     },
     "node_modules/fast-levenshtein": {
       "version": "2.0.6",
       "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
       "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
-      "dev": true,
       "peer": true
     },
     "node_modules/fastq": {
       "version": "1.15.0",
       "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.15.0.tgz",
       "integrity": "sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==",
-      "dev": true,
       "dependencies": {
         "reusify": "^1.0.4"
       }
@@ -6203,7 +6177,6 @@
       "version": "6.0.1",
       "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
       "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "flat-cache": "^3.0.4"
@@ -6216,7 +6189,6 @@
       "version": "7.0.1",
       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
       "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
-      "dev": true,
       "dependencies": {
         "to-regex-range": "^5.0.1"
       },
@@ -6228,7 +6200,6 @@
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
       "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
-      "dev": true,
       "dependencies": {
         "locate-path": "^6.0.0",
         "path-exists": "^4.0.0"
@@ -6259,7 +6230,6 @@
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.1.0.tgz",
       "integrity": "sha512-OHx4Qwrrt0E4jEIcI5/Xb+f+QmJYNj2rrK8wiIdQOIrB9WrrJL8cjZvXdXuBTkkEwEqLycb5BeZDV1o2i9bTew==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "flatted": "^3.2.7",
@@ -6274,7 +6244,6 @@
       "version": "3.2.7",
       "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.2.7.tgz",
       "integrity": "sha512-5nqDSxl8nn5BSNxyR3n4I6eDmbolI6WT+QqR547RwxQapgjQBmtktdP+HTBb/a/zLsbzERTONyUB5pefh5TtjQ==",
-      "dev": true,
       "peer": true
     },
     "node_modules/fn.name": {
@@ -6305,7 +6274,6 @@
       "version": "0.3.3",
       "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.3.tgz",
       "integrity": "sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==",
-      "dev": true,
       "dependencies": {
         "is-callable": "^1.1.3"
       }
@@ -6406,8 +6374,7 @@
     "node_modules/fs.realpath": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
-      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
-      "dev": true
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
     },
     "node_modules/fsevents": {
       "version": "2.3.3",
@@ -6426,14 +6393,12 @@
     "node_modules/function-bind": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
-      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
-      "dev": true
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
     },
     "node_modules/function.prototype.name": {
       "version": "1.1.6",
       "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.6.tgz",
       "integrity": "sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -6452,7 +6417,6 @@
       "version": "1.2.3",
       "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
       "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
-      "dev": true,
       "peer": true,
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -6480,7 +6444,6 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
       "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
-      "dev": true,
       "dependencies": {
         "function-bind": "^1.1.1",
         "has": "^1.0.3",
@@ -6528,7 +6491,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.0.0.tgz",
       "integrity": "sha512-2EmdH1YvIQiZpltCNgkuiUnyukzxM/R6NDJX31Ke3BG1Nq5b0S2PhX59UKi9vZpPDQVdqn+1IcaAwnzTT5vCjw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -6541,6 +6503,17 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/get-tsconfig": {
+      "version": "4.7.2",
+      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.7.2.tgz",
+      "integrity": "sha512-wuMsz4leaj5hbGgg4IvDU0bqJagpftG5l5cXIAvo8uZrqn0NJqwtfupTN00VnkQJPcIRrxYrm1Ue24btpCha2A==",
+      "dependencies": {
+        "resolve-pkg-maps": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
+      }
+    },
     "node_modules/git-log-parser": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/git-log-parser/-/git-log-parser-1.2.0.tgz",
@@ -6633,7 +6606,6 @@
       "version": "7.2.3",
       "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
       "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "dev": true,
       "dependencies": {
         "fs.realpath": "^1.0.0",
         "inflight": "^1.0.4",
@@ -6653,7 +6625,6 @@
       "version": "6.0.2",
       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
       "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "is-glob": "^4.0.3"
@@ -6678,7 +6649,6 @@
       "version": "13.21.0",
       "resolved": "https://registry.npmjs.org/globals/-/globals-13.21.0.tgz",
       "integrity": "sha512-ybyme3s4yy/t/3s35bewwXKOf7cvzfreG2lH0lZl0JB7I4GxRP2ghxOK/Nb9EkRXdbBXZLfq/p/0W2JUONB/Gg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "type-fest": "^0.20.2"
@@ -6694,7 +6664,6 @@
       "version": "0.20.2",
       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
       "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">=10"
@@ -6707,7 +6676,6 @@
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.3.tgz",
       "integrity": "sha512-sFdI5LyBiNTHjRd7cGPWapiHWMOXKyuBNX/cWJ3NfzrZQVa8GI/8cofCl74AOVqq9W5kNmguTIzJ/1s2gyI9wA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "define-properties": "^1.1.3"
@@ -6743,7 +6711,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
       "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
-      "dev": true,
       "dependencies": {
         "get-intrinsic": "^1.1.3"
       },
@@ -6754,14 +6721,12 @@
     "node_modules/graceful-fs": {
       "version": "4.2.11",
       "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
-      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
-      "dev": true
+      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
     },
     "node_modules/graphemer": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
       "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
-      "dev": true,
       "peer": true
     },
     "node_modules/graphql": {
@@ -6807,7 +6772,6 @@
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
       "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
-      "dev": true,
       "dependencies": {
         "function-bind": "^1.1.1"
       },
@@ -6819,7 +6783,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.0.2.tgz",
       "integrity": "sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==",
-      "dev": true,
       "peer": true,
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -6837,7 +6800,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.0.tgz",
       "integrity": "sha512-62DVLZGoiEBDHQyqG4w9xCuZ7eJEwNmJRWw2VY84Oedb7WFcA27fiEVe8oUQx9hAUJ4ekurquucTGwsyO1XGdQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "get-intrinsic": "^1.1.1"
@@ -6850,7 +6812,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
       "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
-      "dev": true,
       "engines": {
         "node": ">= 0.4"
       },
@@ -6862,7 +6823,6 @@
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
       "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
-      "dev": true,
       "engines": {
         "node": ">= 0.4"
       },
@@ -6874,7 +6834,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.0.tgz",
       "integrity": "sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==",
-      "dev": true,
       "dependencies": {
         "has-symbols": "^1.0.2"
       },
@@ -7021,7 +6980,6 @@
       "version": "5.2.4",
       "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.4.tgz",
       "integrity": "sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ==",
-      "dev": true,
       "engines": {
         "node": ">= 4"
       }
@@ -7030,7 +6988,6 @@
       "version": "3.3.0",
       "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
       "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
-      "dev": true,
       "dependencies": {
         "parent-module": "^1.0.0",
         "resolve-from": "^4.0.0"
@@ -7077,7 +7034,6 @@
       "version": "0.1.4",
       "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
       "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
-      "dev": true,
       "engines": {
         "node": ">=0.8.19"
       }
@@ -7095,7 +7051,6 @@
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
       "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
-      "dev": true,
       "dependencies": {
         "once": "^1.3.0",
         "wrappy": "1"
@@ -7197,7 +7152,6 @@
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.0.5.tgz",
       "integrity": "sha512-Y+R5hJrzs52QCG2laLn4udYVnxsfny9CpOhNhUvk/SSSVyF6T27FzRbF0sroPidSu3X8oEAkOn2K804mjpt6UQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "get-intrinsic": "^1.2.0",
@@ -7268,7 +7222,6 @@
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.2.tgz",
       "integrity": "sha512-y+FyyR/w8vfIRq4eQcM1EYgSTnmHXPqaF+IgzgraytCFq5Xh8lllDVmAZolPJiZttZLeFSINPYMaEJ7/vWUa1w==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -7288,7 +7241,6 @@
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.0.4.tgz",
       "integrity": "sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "has-bigints": "^1.0.1"
@@ -7313,7 +7265,6 @@
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.1.2.tgz",
       "integrity": "sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -7335,7 +7286,6 @@
       "version": "1.2.7",
       "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
       "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
-      "dev": true,
       "engines": {
         "node": ">= 0.4"
       },
@@ -7347,7 +7297,6 @@
       "version": "2.13.0",
       "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.13.0.tgz",
       "integrity": "sha512-Z7dk6Qo8pOCp3l4tsX2C5ZVas4V+UxwQodwZhLopL91TX8UyyHEXafPcyoeeWuLrwzHcr3igO78wNLwHJHsMCQ==",
-      "dev": true,
       "dependencies": {
         "has": "^1.0.3"
       },
@@ -7359,7 +7308,6 @@
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.5.tgz",
       "integrity": "sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "has-tostringtag": "^1.0.0"
@@ -7391,7 +7339,6 @@
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
       "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
-      "dev": true,
       "engines": {
         "node": ">=0.10.0"
       }
@@ -7432,7 +7379,6 @@
       "version": "4.0.3",
       "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
       "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
-      "dev": true,
       "dependencies": {
         "is-extglob": "^2.1.1"
       },
@@ -7463,7 +7409,6 @@
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.2.tgz",
       "integrity": "sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">= 0.4"
@@ -7482,7 +7427,6 @@
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
       "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
-      "dev": true,
       "engines": {
         "node": ">=0.12.0"
       }
@@ -7491,7 +7435,6 @@
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.0.7.tgz",
       "integrity": "sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "has-tostringtag": "^1.0.0"
@@ -7525,7 +7468,6 @@
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
       "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
-      "dev": true,
       "engines": {
         "node": ">=8"
       }
@@ -7552,7 +7494,6 @@
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.1.4.tgz",
       "integrity": "sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -7580,7 +7521,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.2.tgz",
       "integrity": "sha512-sqN2UDu1/0y6uvXyStCOzyhAjCSlHceFoMKJW8W9EU9cvic/QdsZ0kEU93HEy3IUEFZIiH/3w+AH/UQbPHNdhA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2"
@@ -7604,7 +7544,6 @@
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.0.7.tgz",
       "integrity": "sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "has-tostringtag": "^1.0.0"
@@ -7620,7 +7559,6 @@
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.4.tgz",
       "integrity": "sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "has-symbols": "^1.0.2"
@@ -7648,7 +7586,6 @@
       "version": "1.1.12",
       "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.12.tgz",
       "integrity": "sha512-Z14TF2JNG8Lss5/HMqt0//T9JeHXttXy5pH/DBU4vi98ozO2btxzq9MwYDZYnKwU8nRsz/+GVFVRDq3DkVuSPg==",
-      "dev": true,
       "dependencies": {
         "which-typed-array": "^1.1.11"
       },
@@ -7663,7 +7600,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.0.2.tgz",
       "integrity": "sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2"
@@ -7705,7 +7641,6 @@
       "version": "2.0.5",
       "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
       "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
-      "dev": true,
       "peer": true
     },
     "node_modules/isexe": {
@@ -8466,7 +8401,6 @@
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
       "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
-      "dev": true,
       "dependencies": {
         "argparse": "^2.0.1"
       },
@@ -8490,7 +8424,6 @@
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
       "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
-      "dev": true,
       "peer": true
     },
     "node_modules/json-parse-better-errors": {
@@ -8509,14 +8442,12 @@
       "version": "0.4.1",
       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
       "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
-      "dev": true,
       "peer": true
     },
     "node_modules/json-stable-stringify-without-jsonify": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
       "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
-      "dev": true,
       "peer": true
     },
     "node_modules/json-stringify-safe": {
@@ -8529,7 +8460,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
       "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "minimist": "^1.2.0"
@@ -8579,7 +8509,6 @@
       "version": "4.5.3",
       "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.3.tgz",
       "integrity": "sha512-QCiSav9WaX1PgETJ+SpNnx2PRRapJ/oRSXM4VO5OGYGSjrxbKPVFVhB3l2OCbLCk329N8qyAtsJjSjvVBWzEug==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "json-buffer": "3.0.1"
@@ -8621,7 +8550,6 @@
       "version": "0.4.1",
       "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
       "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "prelude-ls": "^1.2.1",
@@ -8821,7 +8749,6 @@
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
       "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
-      "dev": true,
       "dependencies": {
         "p-locate": "^5.0.0"
       },
@@ -8910,8 +8837,7 @@
     "node_modules/lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
-      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
-      "dev": true
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ=="
     },
     "node_modules/lodash.mergewith": {
       "version": "4.6.2",
@@ -9267,7 +9193,6 @@
       "version": "1.4.1",
       "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
       "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
-      "dev": true,
       "engines": {
         "node": ">= 8"
       }
@@ -9276,7 +9201,6 @@
       "version": "4.0.5",
       "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
       "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
-      "dev": true,
       "dependencies": {
         "braces": "^3.0.2",
         "picomatch": "^2.3.1"
@@ -9347,7 +9271,6 @@
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
       "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
       "dependencies": {
         "brace-expansion": "^1.1.7"
       },
@@ -9359,7 +9282,6 @@
       "version": "1.2.8",
       "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
       "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
-      "dev": true,
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
@@ -9500,8 +9422,7 @@
     "node_modules/natural-compare": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
-      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
-      "dev": true
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw=="
     },
     "node_modules/neo-async": {
       "version": "2.6.2",
@@ -12593,7 +12514,6 @@
       "version": "1.12.3",
       "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
       "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==",
-      "dev": true,
       "peer": true,
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -12603,7 +12523,6 @@
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
       "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">= 0.4"
@@ -12613,7 +12532,6 @@
       "version": "4.1.4",
       "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.4.tgz",
       "integrity": "sha512-1mxKf0e58bvyjSCtKYY4sRe9itRk3PJpquJOjeIkz885CczcI4IvJJDLPS72oowuSh+pBxUFROpX+TU++hxhZQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -12632,7 +12550,6 @@
       "version": "2.0.7",
       "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.7.tgz",
       "integrity": "sha512-UPbPHML6sL8PI/mOqPwsH4G6iyXcCGzLin8KvEPenOZN5lpCNBZZQ+V62vdjB1mQHrmqGQt5/OJzemUA+KJmEA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -12650,7 +12567,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.1.tgz",
       "integrity": "sha512-HqaQtqLnp/8Bn4GL16cj+CUYbnpe1bh0TtEaWvybszDG4tgxCJuRpV8VGuvNaI1fAnI4lUJzDG55MXcOH4JZcQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -12663,7 +12579,6 @@
       "version": "1.1.7",
       "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.1.7.tgz",
       "integrity": "sha512-aU6xnDFYT3x17e/f0IiiwlGPTy2jzMySGfUB4fq6z7CV8l85CWHDk5ErhyhpfDHhrOMwGFhSQkhMGHaIotA6Ng==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -12681,7 +12596,6 @@
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
       "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
-      "dev": true,
       "dependencies": {
         "wrappy": "1"
       }
@@ -12731,7 +12645,6 @@
       "version": "0.9.3",
       "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.3.tgz",
       "integrity": "sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "@aashutoshrathi/word-wrap": "^1.2.3",
@@ -12796,7 +12709,6 @@
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
       "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
-      "dev": true,
       "dependencies": {
         "yocto-queue": "^0.1.0"
       },
@@ -12811,7 +12723,6 @@
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
       "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
-      "dev": true,
       "dependencies": {
         "p-limit": "^3.0.2"
       },
@@ -12853,7 +12764,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
-      "dev": true,
       "dependencies": {
         "callsites": "^3.0.0"
       },
@@ -12883,7 +12793,6 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
       "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
-      "dev": true,
       "engines": {
         "node": ">=8"
       }
@@ -12892,7 +12801,6 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
       "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
-      "dev": true,
       "engines": {
         "node": ">=0.10.0"
       }
@@ -12908,8 +12816,7 @@
     "node_modules/path-parse": {
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
-      "dev": true
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
     },
     "node_modules/path-to-regexp": {
       "version": "6.2.1",
@@ -12936,7 +12843,6 @@
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
       "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "dev": true,
       "engines": {
         "node": ">=8.6"
       },
@@ -13122,7 +13028,6 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
       "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
-      "dev": true,
       "peer": true,
       "engines": {
         "node": ">= 0.8.0"
@@ -13211,7 +13116,6 @@
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
       "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
-      "dev": true,
       "engines": {
         "node": ">=6"
       }
@@ -13246,7 +13150,6 @@
       "version": "1.2.3",
       "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
       "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
-      "dev": true,
       "funding": [
         {
           "type": "github",
@@ -13515,7 +13418,6 @@
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.0.tgz",
       "integrity": "sha512-0SutC3pNudRKgquxGoRGIz946MZVHqbNfPjBdxeOhBrdgDKlRoXmYLQN9xRbrR09ZXWeGAdPuif7egofn6v5LA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -13568,7 +13470,6 @@
       "version": "1.22.4",
       "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.4.tgz",
       "integrity": "sha512-PXNdCiPqDqeUou+w1C2eTQbNfxKSuMxqTCuvlmmMsk1NWHL5fRrhY6Pl0qEYYc6+QqGClco1Qj8XnjPego4wfg==",
-      "dev": true,
       "dependencies": {
         "is-core-module": "^2.13.0",
         "path-parse": "^1.0.7",
@@ -13606,7 +13507,6 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
       "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
-      "dev": true,
       "engines": {
         "node": ">=4"
       }
@@ -13623,6 +13523,14 @@
         "node": ">=8"
       }
     },
+    "node_modules/resolve-pkg-maps": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
+      "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
+      "funding": {
+        "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
+      }
+    },
     "node_modules/resolve.exports": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
@@ -13648,7 +13556,6 @@
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
       "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
-      "dev": true,
       "engines": {
         "iojs": ">=1.0.0",
         "node": ">=0.10.0"
@@ -13664,7 +13571,6 @@
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
       "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
-      "dev": true,
       "dependencies": {
         "glob": "^7.1.3"
       },
@@ -13760,7 +13666,6 @@
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
       "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
-      "dev": true,
       "funding": [
         {
           "type": "github",
@@ -13791,7 +13696,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.0.0.tgz",
       "integrity": "sha512-9dVEFruWIsnie89yym+xWTAYASdpw3CJV7Li/6zBewGf9z2i1j31rP6jnY0pHEO4QZh6N0K11bFjWmdR8UGdPQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -13829,7 +13733,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.0.0.tgz",
       "integrity": "sha512-JBUUzyOgEwXQY1NuPtvcj/qcBDbDmEvWufhlnXZIm75DEHp+afM1r1ujJpJsV/gSM4t59tpDyPi1sd6ZaPFfsA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -14101,7 +14004,6 @@
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
       "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.0",
@@ -14486,7 +14388,6 @@
       "version": "1.2.7",
       "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.7.tgz",
       "integrity": "sha512-p6TmeT1T3411M8Cgg9wBTMRtY2q9+PNy9EV1i2lIXUN/btt763oIfxwN3RR8VU6wHX8j/1CFy0L+YuThm6bgOg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -14504,7 +14405,6 @@
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.6.tgz",
       "integrity": "sha512-JySq+4mrPf9EsDBEDYMOb/lM7XQLulwg5R/m1r0PXEFqrV0qHvl58sdTilSXtKOflCsK2E8jxf+GKC0T07RWwQ==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -14519,7 +14419,6 @@
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.6.tgz",
       "integrity": "sha512-omqjMDaY92pbn5HOX7f9IccLA+U1tA9GvtU4JrodiXFfYB7jPzzHpRzpglLAjtUV6bB557zwClJezTqnAiYnQA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -14545,7 +14444,6 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
       "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
-      "dev": true,
       "engines": {
         "node": ">=4"
       }
@@ -14578,7 +14476,6 @@
       "version": "3.1.1",
       "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
       "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
-      "dev": true,
       "engines": {
         "node": ">=8"
       },
@@ -14614,7 +14511,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
       "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
-      "dev": true,
       "engines": {
         "node": ">= 0.4"
       },
@@ -14639,6 +14535,14 @@
         "url": "https://opencollective.com/unts"
       }
     },
+    "node_modules/tapable": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz",
+      "integrity": "sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==",
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/temp-dir": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
@@ -14711,7 +14615,6 @@
       "version": "0.2.0",
       "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
       "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
-      "dev": true,
       "peer": true
     },
     "node_modules/through": {
@@ -14771,7 +14674,6 @@
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
       "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
-      "dev": true,
       "dependencies": {
         "is-number": "^7.0.0"
       },
@@ -14944,7 +14846,6 @@
       "version": "3.14.2",
       "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.14.2.tgz",
       "integrity": "sha512-o/9iXgCYc5L/JxCHPe3Hvh8Q/2xm5Z+p18PESBU6Ff33695QnCHBEjcytY2q19ua7Mbl/DavtBOLq+oG0RCL+g==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "@types/json5": "^0.0.29",
@@ -14962,7 +14863,6 @@
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
       "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "prelude-ls": "^1.2.1"
@@ -14995,7 +14895,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.0.tgz",
       "integrity": "sha512-Y8KTSIglk9OZEr8zywiIHG/kmQ7KWyjseXs1CbSo8vC42w7hg2HgYTxSWwP0+is7bWDc1H+Fo026CpHFwm8tkw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -15010,7 +14909,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.0.tgz",
       "integrity": "sha512-Or/+kvLxNpeQ9DtSydonMxCx+9ZXOswtwJn17SNLvhptaXYDJvkFFP5zbfU/uLmvnBJlI4yrnXRxpdWH/M5tNA==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -15029,7 +14927,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.0.tgz",
       "integrity": "sha512-RD97prjEt9EL8YgAgpOkf3O4IF9lhJFr9g0htQkm0rchFp/Vx7LW5Q8fSXXub7BXAODyUQohRMyOc3faCPd0hg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "available-typed-arrays": "^1.0.5",
@@ -15049,7 +14946,6 @@
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.4.tgz",
       "integrity": "sha512-KjZypGq+I/H7HI5HlOoGHkWUUGq+Q0TPhQurLbyrVrvnKTBgzLhIJ7j6J/XTQOi0d1RjyZ0wdas8bKs2p0x3Ng==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -15061,16 +14957,16 @@
       }
     },
     "node_modules/typescript": {
-      "version": "4.9.5",
-      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.9.5.tgz",
-      "integrity": "sha512-1FXk9E2Hm+QzZQ7z+McJiHL4NW1F2EzMu9Nq9i3zAaGqibafqYwCVU6WyWAuyQRRzOlxou8xZSyXLEN8oKj24g==",
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.2.2.tgz",
+      "integrity": "sha512-mI4WrpHsbCIcwT9cF4FZvr80QUeKvsUsUvKDoR+X/7XHQH98xYD8YHZg7ANtz2GtZt/CBq2QJ0thkGJMHfqc1w==",
       "dev": true,
       "bin": {
         "tsc": "bin/tsc",
         "tsserver": "bin/tsserver"
       },
       "engines": {
-        "node": ">=4.2.0"
+        "node": ">=14.17"
       }
     },
     "node_modules/uglify-js": {
@@ -15090,7 +14986,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.0.2.tgz",
       "integrity": "sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "call-bind": "^1.0.2",
@@ -15172,7 +15067,6 @@
       "version": "4.4.1",
       "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
       "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
-      "dev": true,
       "dependencies": {
         "punycode": "^2.1.0"
       }
@@ -15332,7 +15226,6 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.0.2.tgz",
       "integrity": "sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==",
-      "dev": true,
       "peer": true,
       "dependencies": {
         "is-bigint": "^1.0.1",
@@ -15349,7 +15242,6 @@
       "version": "1.1.11",
       "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.11.tgz",
       "integrity": "sha512-qe9UWWpkeG5yzZ0tNYxDmd7vo58HDBc39mZ0xWWpolAGADdFOzkfamWLDxkOWcvHQKVmdTyQdLD4NOfjLWTKew==",
-      "dev": true,
       "dependencies": {
         "available-typed-arrays": "^1.0.5",
         "call-bind": "^1.0.2",
@@ -15423,8 +15315,7 @@
     "node_modules/wrappy": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
-      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
-      "dev": true
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
     },
     "node_modules/write-file-atomic": {
       "version": "4.0.2",
@@ -15547,7 +15438,6 @@
       "version": "0.1.0",
       "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
       "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
-      "dev": true,
       "engines": {
         "node": ">=10"
       },
diff --git a/package.json b/package.json
index 59c0a76..31cf5a0 100644
--- a/package.json
+++ b/package.json
@@ -1,14 +1,18 @@
 {
   "name": "zksync-cli",
+  "type": "module",
   "version": "0.0.0-development",
   "description": "CLI tool that simplifies the process of developing applications and interacting with the zkSync Era network",
   "main": "bin/index.js",
   "bin": {
     "zksync-cli": "bin/index.js"
   },
+  "exports": {
+    "./lib": "./bin/lib/index.js"
+  },
   "scripts": {
     "build": "tsc -p tsconfig.build.json && copyfiles -u 4 \"src/commands/local/modules/**/!(*.ts)\" bin/commands/local/modules/",
-    "dev": "cross-env NODE_ENV=development ts-node --transpile-only src/index.ts",
+    "dev": "cross-env NODE_ENV=development ts-node-esm src/index.ts",
     "test": "jest",
     "typecheck": "tsc -p . --noEmit",
     "lint": "eslint . --ext ./src/* --fix --ignore-path .gitignore --no-error-on-unmatched-pattern --max-warnings=0",
@@ -33,6 +37,7 @@
     "commander": "^11.0.0",
     "cross-env": "^7.0.3",
     "dotenv": "^16.3.1",
+    "eslint-import-resolver-typescript": "^3.6.1",
     "ethers": "5.7.2",
     "inquirer": "^8.1.4",
     "node-machine-id": "^1.1.12",
@@ -62,7 +67,7 @@
     "ts-jest": "^29.1.1",
     "ts-node": "^10.9.1",
     "tsc-files": "^1.1.4",
-    "typescript": "^4.9.5"
+    "typescript": "^5.2.2"
   },
   "publishConfig": {
     "access": "public"
diff --git a/src/commands/create-project.ts b/src/commands/create-project.ts
index 1e7bb5b..48e0d3e 100644
--- a/src/commands/create-project.ts
+++ b/src/commands/create-project.ts
@@ -1,15 +1,15 @@
 import { Option } from "commander";
-import { prompt } from "inquirer";
+import inquirer from "inquirer";
 import path from "path";
 
-import { zeekOption } from "../common/options";
-import Program from "../program";
-import { track } from "../utils/analytics";
-import { optionNameToParam, executeCommand } from "../utils/helpers";
-import Logger from "../utils/logger";
-import zeek from "../utils/zeek";
+import { zeekOption } from "../common/options.js";
+import Program from "../program.js";
+import { track } from "../utils/analytics.js";
+import { optionNameToParam, executeCommand } from "../utils/helpers.js";
+import Logger from "../utils/logger.js";
+import zeek from "../utils/zeek.js";
 
-import type { DefaultOptions } from "../common/options";
+import type { DefaultOptions } from "../common/options.js";
 
 const templates = [
   {
@@ -41,7 +41,7 @@ export const handler = async (folderName: string, options: CreateOptions) => {
     };
     Logger.debug(`Initial create-project options: ${JSON.stringify(options, null, 2)}`);
 
-    const answers: CreateOptions = await prompt(
+    const answers: CreateOptions = await inquirer.prompt(
       [
         {
           message: templateOption.description,
diff --git a/src/commands/deposit.ts b/src/commands/deposit.ts
index 28c0006..874751f 100644
--- a/src/commands/deposit.ts
+++ b/src/commands/deposit.ts
@@ -1,4 +1,4 @@
-import { prompt } from "inquirer";
+import inquirer from "inquirer";
 
 import {
   amountOptionCreate,
@@ -8,24 +8,24 @@ import {
   privateKeyOption,
   recipientOptionCreate,
   zeekOption,
-} from "../common/options";
-import { l2Chains } from "../data/chains";
-import Program from "../program";
-import { track } from "../utils/analytics";
-import { ETH_TOKEN } from "../utils/constants";
-import { bigNumberToDecimal, decimalToBigNumber } from "../utils/formatters";
+} from "../common/options.js";
+import { l2Chains } from "../data/chains.js";
+import Program from "../program.js";
+import { track } from "../utils/analytics.js";
+import { ETH_TOKEN } from "../utils/constants.js";
+import { bigNumberToDecimal, decimalToBigNumber } from "../utils/formatters.js";
 import {
   getAddressFromPrivateKey,
   getL1Provider,
   getL2Provider,
   getL2Wallet,
   optionNameToParam,
-} from "../utils/helpers";
-import Logger from "../utils/logger";
-import { isDecimalAmount, isAddress, isPrivateKey } from "../utils/validators";
-import zeek from "../utils/zeek";
+} from "../utils/helpers.js";
+import Logger from "../utils/logger.js";
+import { isDecimalAmount, isAddress, isPrivateKey } from "../utils/validators.js";
+import zeek from "../utils/zeek.js";
 
-import type { DefaultTransferOptions } from "../common/options";
+import type { DefaultTransferOptions } from "../common/options.js";
 
 const amountOption = amountOptionCreate("deposit");
 const recipientOption = recipientOptionCreate("L2");
@@ -42,7 +42,7 @@ export const handler = async (options: DepositOptions) => {
       )}`
     );
 
-    const answers: DepositOptions = await prompt(
+    const answers: DepositOptions = await inquirer.prompt(
       [
         {
           message: chainOption.description,
diff --git a/src/commands/local/ConfigHandler.ts b/src/commands/local/ConfigHandler.ts
new file mode 100644
index 0000000..23487d8
--- /dev/null
+++ b/src/commands/local/ConfigHandler.ts
@@ -0,0 +1,69 @@
+import { readFileSync } from "fs";
+
+import { ModuleCategory } from "./modules/Module.js";
+import { getModulePackages } from "./modules/utils/packages.js";
+import { fileOrDirExists, getLocalPath, writeFile } from "../../utils/files.js";
+import Logger from "../../utils/logger.js";
+
+import type { ModuleNode } from "./modules/Module.js";
+import type Module from "./modules/Module.js";
+
+type ConfigJSON = {
+  modules: string[];
+};
+
+class ConfigHandlerClass {
+  configPath = getLocalPath("config.json");
+
+  get configExists() {
+    return fileOrDirExists(this.configPath);
+  }
+  get config(): ConfigJSON {
+    const emptyConfig = {
+      modules: [],
+    };
+    try {
+      return this.configExists ? JSON.parse(readFileSync(this.configPath, "utf-8")) : emptyConfig;
+    } catch (error) {
+      Logger.error(`Error while reading config file: ${error}`);
+      return emptyConfig;
+    }
+  }
+  set config(data: ConfigJSON) {
+    writeFile(this.configPath, JSON.stringify(data, null, 2));
+    Logger.debug(`Saved config to ${this.configPath}`);
+    Logger.debug(`Config: ${JSON.stringify(data, null, 2)}`);
+  }
+
+  async getAllModules() {
+    const installedModules = await getModulePackages();
+    return installedModules.map((modulePackage) => {
+      // eslint-disable-next-line @typescript-eslint/no-explicit-any
+      const module = modulePackage.module as any;
+      const newModule: Module = new module(this.config);
+      newModule.package = {
+        name: modulePackage.name,
+        version: modulePackage.version,
+        symlinked: modulePackage.symlinked ?? false,
+      };
+      return newModule;
+    });
+  }
+  async getConfigModules() {
+    return (await this.getAllModules()).filter((module) => this.config.modules.includes(module.package.name));
+  }
+
+  async getNodeInfo() {
+    const modules = await this.getAllModules();
+    const node = modules.find((module) => module.category === ModuleCategory.Node);
+    if (!node) {
+      throw new Error("No node module found");
+    }
+    return (node as ModuleNode).nodeInfo;
+  }
+}
+
+const configHandler = new ConfigHandlerClass();
+
+export type ConfigHandler = typeof configHandler;
+export default configHandler;
diff --git a/src/commands/local/clean.ts b/src/commands/local/clean.ts
index ab8daa4..67d5ba4 100644
--- a/src/commands/local/clean.ts
+++ b/src/commands/local/clean.ts
@@ -1,23 +1,34 @@
-import { getConfig } from "./config";
-import { getConfigModules } from "./modules";
-import { track } from "../../utils/analytics";
-import Logger from "../../utils/logger";
+import Program from "./command.js";
+import configHandler from "./ConfigHandler.js";
+import { track } from "../../utils/analytics.js";
+import Logger from "../../utils/logger.js";
 
-import { local } from ".";
+import type Module from "./modules/Module.js";
 
-export const handler = async () => {
+export const cleanModule = async (module: Module) => {
   try {
-    const config = getConfig();
-    Logger.debug(`Local config: ${JSON.stringify(config, null, 2)}`);
+    const isInstalled = await module.isInstalled();
+    if (!isInstalled) {
+      return;
+    }
+    module.removeDataDir();
+    await module.clean();
+  } catch (error) {
+    Logger.error(`There was an error while cleaning module "${module.name}":`);
+    Logger.error(error);
+  }
+};
 
-    const modules = getConfigModules(config);
-    Logger.info(`Cleaning: ${modules.map((m) => m.name).join(", ")}...`);
-    await Promise.all(modules.map((m) => m.isInstalled().then((installed) => (installed ? m.clean() : undefined))));
+export const handler = async () => {
+  try {
+    const modules = await configHandler.getConfigModules();
+    Logger.info(`Cleaning: ${modules.map((module) => module.name).join(", ")}...`);
+    await Promise.all(modules.map((module) => cleanModule(module)));
   } catch (error) {
-    Logger.error("There was an error while stopping the testing environment:");
+    Logger.error("There was an error while cleaning the testing environment:");
     Logger.error(error);
     track("error", { error });
   }
 };
 
-local.command("clean").description("Stops the local zkSync environment and modules").action(handler);
+Program.command("clean").description("Cleans data for all config modules").action(handler);
diff --git a/src/commands/local/command.ts b/src/commands/local/command.ts
new file mode 100644
index 0000000..bb007ee
--- /dev/null
+++ b/src/commands/local/command.ts
@@ -0,0 +1,3 @@
+import Program from "../../program.js";
+
+export default Program.command("local").description("All-in-one tool for local zkSync development");
diff --git a/src/commands/local/config.ts b/src/commands/local/config.ts
index 7f4b15c..9c244c7 100644
--- a/src/commands/local/config.ts
+++ b/src/commands/local/config.ts
@@ -1,58 +1,51 @@
 import { Option } from "commander";
-import { readFileSync, existsSync } from "fs";
-import { prompt } from "inquirer";
+import inquirer from "inquirer";
 
-import { getModulesMeta } from "./modules";
-import { track } from "../../utils/analytics";
-import { getLocalPath, writeFile } from "../../utils/files";
-import { optionNameToParam } from "../../utils/helpers";
-import Logger from "../../utils/logger";
-
-import { local } from "./";
-
-export type Config = {
-  modules: string[];
-};
-
-const configDirectory = getLocalPath("config.json");
-export const configExists = (): boolean => {
-  return existsSync(configDirectory);
-};
-export const getConfig = (): Config => {
-  if (!configExists()) {
-    throw new Error("Config file does not exist. Run `zksync-cli local config` to create one.");
-  }
-  return JSON.parse(readFileSync(configDirectory, "utf-8"));
-};
+import Program from "./command.js";
+import configHandler from "./ConfigHandler.js";
+import { ModuleCategory } from "./modules/Module.js";
+import { track } from "../../utils/analytics.js";
+import { optionNameToParam } from "../../utils/helpers.js";
+import Logger from "../../utils/logger.js";
 
 type LocalConfigOptions = {
   node?: string;
   modules?: string[];
 };
 
-const modules = getModulesMeta();
-const nodes = modules.filter((module) => module.tags.includes("node"));
-const additionalModules = modules.filter((module) => !module.tags.includes("node"));
-
-const nodeOption = new Option("--n, --node <node_type>", "Node type to use").choices(nodes.map((node) => node.key));
-const moduleOption = new Option("--m, --modules <module...>", "Additional modules to use").choices(
-  additionalModules.map((module) => module.key)
-);
+const moduleOption = new Option("--m, --modules <module...>", "Modules to use");
 
 export const handler = async (options: LocalConfigOptions = {}) => {
   try {
     Logger.debug(`Initial local config options: ${JSON.stringify(options, null, 2)}`);
 
-    const answers: LocalConfigOptions = await prompt(
+    const modules = await configHandler.getAllModules();
+    if (!modules.length) {
+      Logger.error("No installed modules were found");
+      Logger.error("Run `zksync-cli local install [module-name]` to install modules.");
+      return;
+    }
+    const nodes = modules.filter((module) => module.category === ModuleCategory.Node);
+    const additionalModules = modules
+      .filter((module) => !module.category.includes("node"))
+      .sort((a, b) => {
+        if (a.category === b.category) {
+          return a.name.localeCompare(b.name);
+        }
+        return a.category.localeCompare(b.category);
+      });
+
+    const answers: LocalConfigOptions = await inquirer.prompt(
       [
         {
-          message: nodeOption.description,
-          name: optionNameToParam(nodeOption.long!),
+          message: "Node type to use",
+          name: "node",
           type: "list",
+          when: () => nodes.length > 0,
           choices: nodes.map((node) => ({
             name: `${node.name} - ${node.description}`,
             short: node.name,
-            value: node.key,
+            value: node.package.name,
           })),
           required: true,
         },
@@ -60,10 +53,11 @@ export const handler = async (options: LocalConfigOptions = {}) => {
           message: moduleOption.description,
           name: optionNameToParam(moduleOption.long!),
           type: "checkbox",
+          when: () => additionalModules.length > 0,
           choices: additionalModules.map((module) => ({
             name: `${module.name} - ${module.description}`,
             short: module.name,
-            value: module.key,
+            value: module.package.name,
           })),
         },
       ],
@@ -71,6 +65,7 @@ export const handler = async (options: LocalConfigOptions = {}) => {
     );
 
     options = {
+      [optionNameToParam(moduleOption.long!)]: [],
       ...options,
       ...answers,
     };
@@ -79,20 +74,12 @@ export const handler = async (options: LocalConfigOptions = {}) => {
 
     Logger.info("Saving configuration to local config file...");
 
-    const selectedNode = modules.find((module) => module.key === options.node)!;
-    const selectedAdditionalModules = options.modules!.map((module) => modules.find((m) => m.key === module)!);
+    const selectedNode = modules.find((module) => module.package.name === options.node)!;
+    const selectedAdditionalModules = options.modules!.map((module) => modules.find((m) => m.package.name === module)!);
 
-    const config: Config = {
-      modules: [selectedNode.key, ...selectedAdditionalModules.map((module) => module.key)],
+    configHandler.config = {
+      modules: [selectedNode.package.name, ...selectedAdditionalModules.map((module) => module.package.name)],
     };
-    writeFile(configDirectory, JSON.stringify(config, null, 2));
-    Logger.debug(`Saved config to ${configDirectory}`);
-
-    Logger.info(`Configured with:
-  Node Type: ${selectedNode.name}
-  Modules: ${
-    selectedAdditionalModules.length ? selectedAdditionalModules.map((module) => module.name).join(", ") : "None"
-  }`);
   } catch (error) {
     Logger.error("There was an error while configuring the testing environment:");
     Logger.error(error);
@@ -100,9 +87,4 @@ export const handler = async (options: LocalConfigOptions = {}) => {
   }
 };
 
-local
-  .command("config")
-  .description("Configure your testing environment")
-  .addOption(nodeOption)
-  .addOption(moduleOption)
-  .action(handler);
+Program.command("config").description("Configure your testing environment").addOption(moduleOption).action(handler);
diff --git a/src/commands/local/index.ts b/src/commands/local/index.ts
index a0754ea..7abd64c 100644
--- a/src/commands/local/index.ts
+++ b/src/commands/local/index.ts
@@ -1,9 +1,12 @@
-import Program from "../../program";
+import "./install.js";
+import "./update.js";
+import "./uninstall.js";
+import "./modules/index.js";
 
-export const local = Program.command("local").description("All-in-one tool for local zkSync development");
+import "./config.js";
+import "./start.js";
+import "./stop.js";
+import "./restart.js";
+import "./clean.js";
 
-import "./config";
-import "./start";
-import "./restart";
-import "./stop";
-import "./clean";
+import "./command.js"; // registers all the commands above
diff --git a/src/commands/local/install.ts b/src/commands/local/install.ts
new file mode 100644
index 0000000..33c2910
--- /dev/null
+++ b/src/commands/local/install.ts
@@ -0,0 +1,28 @@
+import { Option } from "commander";
+
+import Program from "./command.js";
+import { modulesPath } from "./modules/utils/packages.js";
+import { track } from "../../utils/analytics.js";
+import { executeCommand } from "../../utils/helpers.js";
+import Logger from "../../utils/logger.js";
+
+const linkOption = new Option("--link", "Use `npm link` instead of `npm install` (useful during module development)");
+
+export const handler = async (moduleNames: string[], options: { link: boolean }) => {
+  try {
+    const command = options.link ? "npm link" : "npm install";
+    const fullCommand = `${command}${moduleNames.length ? ` ${moduleNames.join(" ")}` : ""}`;
+    await executeCommand(fullCommand, { cwd: modulesPath });
+  } catch (error) {
+    Logger.error("There was an error while installing module:");
+    Logger.error(error);
+    track("error", { error });
+  }
+};
+
+Program.command("install")
+  .alias("i")
+  .argument("[module...]", "NPM package name of the module to install")
+  .description("Install module with NPM")
+  .addOption(linkOption)
+  .action(handler);
diff --git a/src/commands/local/modules/Module.ts b/src/commands/local/modules/Module.ts
index 3ac853e..c54f4a2 100644
--- a/src/commands/local/modules/Module.ts
+++ b/src/commands/local/modules/Module.ts
@@ -1,40 +1,111 @@
-import { getLocalPath } from "../../../utils/files";
+import fs from "fs";
+import path from "path";
 
-import type { Config } from "../config";
+import { modulesPath } from "./utils/packages.js";
+import { fileOrDirExists, writeFile } from "../../../utils/files.js";
+import Logger from "../../../utils/logger.js";
 
+import type { LogEntry } from "../../../utils/formatters.js";
+import type { ConfigHandler } from "../ConfigHandler.js";
+
+export enum ModuleCategory {
+  Node = "node",
+  Dapp = "dapp",
+  Explorer = "explorer",
+  Service = "service",
+  Other = "other",
+}
 export type DefaultModuleFields = {
   name: string;
   description: string;
-  key: string;
-  tags: Array<"node" | "dapp" | "explorer" | "service">;
+  category: ModuleCategory;
 };
-abstract class Module {
-  config: Config;
+
+type ModuleConfigDefault = Record<string, unknown>;
+abstract class Module<TModuleConfig = ModuleConfigDefault> {
+  configHandler: ConfigHandler;
 
   name: DefaultModuleFields["name"];
   description: DefaultModuleFields["description"];
-  key: DefaultModuleFields["key"];
-  tags: DefaultModuleFields["tags"];
+  category: DefaultModuleFields["category"];
 
-  get dataDirPath() {
-    return getLocalPath("modules", this.key);
-  }
+  package = {
+    name: "",
+    version: "",
+    symlinked: false,
+  };
 
   abstract isInstalled(): Promise<boolean>;
   abstract install(): Promise<void>;
+
   abstract isRunning(): Promise<boolean>;
   abstract start(): Promise<void>;
-  async onStartCompleted(): Promise<void> {} // Optional method
+  getStartupInfo(): LogEntry[] | Promise<LogEntry[]> {
+    return [];
+  }
+
+  get version(): string | undefined {
+    return;
+  }
+  async getLatestVersion(): Promise<string | undefined> {
+    return;
+  }
+  async update(): Promise<void> {}
+
   abstract stop(): Promise<void>;
   abstract clean(): Promise<void>;
 
-  constructor(data: DefaultModuleFields, config: Config) {
+  get dataDirPath() {
+    return path.join(modulesPath, this.package.name);
+  }
+  get configPath() {
+    return path.join(this.dataDirPath, "config.json");
+  }
+
+  get moduleConfig(): TModuleConfig {
+    if (!fileOrDirExists(this.configPath)) {
+      return {} as TModuleConfig;
+    } else {
+      try {
+        return JSON.parse(fs.readFileSync(this.configPath, { encoding: "utf-8" }));
+      } catch (error) {
+        Logger.error(`There was an error while reading config file for module "${this.name}":`);
+        return {} as TModuleConfig;
+      }
+    }
+  }
+  setModuleConfig(config: TModuleConfig) {
+    writeFile(this.configPath, JSON.stringify(config, null, 2));
+  }
+  removeDataDir() {
+    if (fileOrDirExists(this.dataDirPath)) {
+      fs.rmSync(this.dataDirPath, { recursive: true });
+    }
+  }
+
+  constructor(data: DefaultModuleFields, configHandler: ConfigHandler) {
     this.name = data.name;
     this.description = data.description;
-    this.key = data.key;
-    this.tags = data.tags;
-    this.config = config;
+    this.category = data.category;
+    this.configHandler = configHandler;
   }
 }
-
 export default Module;
+
+export type NodeInfo = {
+  l1?: {
+    chainId: number;
+    rpcUrl: string;
+  };
+  l2: {
+    chainId: number;
+    rpcUrl: string;
+  };
+};
+export abstract class ModuleNode<TModuleConfig = ModuleConfigDefault> extends Module<TModuleConfig> {
+  abstract get nodeInfo(): NodeInfo;
+
+  constructor(data: Omit<DefaultModuleFields, "category">, configHandler: ConfigHandler) {
+    super({ ...data, category: ModuleCategory.Node }, configHandler);
+  }
+}
diff --git a/src/commands/local/modules/block-explorer/index.ts b/src/commands/local/modules/block-explorer/index.ts
deleted file mode 100644
index cce01c8..0000000
--- a/src/commands/local/modules/block-explorer/index.ts
+++ /dev/null
@@ -1,36 +0,0 @@
-import Logger from "../../../../utils/logger";
-import Module from "../Module";
-
-import type { Config } from "../../config";
-
-export default class SetupModule extends Module {
-  constructor(config: Config) {
-    super(
-      {
-        name: "Block Explorer",
-        description: "Includes explorer UI and API",
-        key: "explorer",
-        tags: ["service", "explorer"],
-      },
-      config
-    );
-  }
-
-  async isInstalled() {
-    return true;
-  }
-
-  async install() {}
-
-  async isRunning() {
-    return false;
-  }
-
-  async start() {
-    Logger.warn("Block explorer is not implemented yet");
-  }
-
-  async stop() {}
-
-  async clean() {}
-}
diff --git a/src/commands/local/modules/dockerized-node/index.ts b/src/commands/local/modules/dockerized-node/index.ts
deleted file mode 100644
index 5db92a8..0000000
--- a/src/commands/local/modules/dockerized-node/index.ts
+++ /dev/null
@@ -1,73 +0,0 @@
-import chalk from "chalk";
-import path from "path";
-
-import { compose } from "../../../../utils/docker";
-import { fileOrDirExists } from "../../../../utils/files";
-import { cloneRepo } from "../../../../utils/git";
-import Logger from "../../../../utils/logger";
-import Module from "../Module";
-
-import type { Config } from "../../config";
-
-export default class SetupModule extends Module {
-  constructor(config: Config) {
-    super(
-      {
-        name: "Dockerized node",
-        description: "Persistent state, includes L1 and L2 nodes",
-        key: "dockerized-node",
-        tags: ["node"],
-      },
-      config
-    );
-  }
-
-  justInstalled = false;
-
-  git = "https://github.com/matter-labs/local-setup.git";
-  composeFile = path.join(this.dataDirPath, "docker-compose.yml");
-
-  async isInstalled() {
-    if (!fileOrDirExists(this.dataDirPath)) return false;
-    return (await compose.status(this.composeFile, this.dataDirPath)).length ? true : false;
-  }
-
-  async install() {
-    await cloneRepo(this.git, this.dataDirPath);
-    await compose.create(this.composeFile, this.dataDirPath);
-    this.justInstalled = true;
-  }
-
-  async isRunning() {
-    return (await compose.status(this.composeFile, this.dataDirPath)).some(({ isRunning }) => isRunning);
-  }
-
-  async start() {
-    await compose.up(this.composeFile, this.dataDirPath);
-  }
-
-  async onStartCompleted() {
-    Logger.info(`${this.name} ready:`);
-    Logger.info(
-      chalk.blue(` - zkSync Node (L2):
-    - Chain ID: 270
-    - RPC URL: http://localhost:3050
- - Ethereum Node (L1):
-    - Chain ID: 9
-    - RPC URL: http://localhost:8545
- - Rich accounts: ${path.join(this.dataDirPath, "rich-wallets.json")}`),
-      { noFormat: true }
-    );
-    if (this.justInstalled) {
-      Logger.warn(" - First start may take a while until zkSync node is actually running, please be patient...");
-    }
-  }
-
-  async stop() {
-    await compose.stop(this.composeFile, this.dataDirPath);
-  }
-
-  async clean() {
-    await compose.down(this.composeFile, this.dataDirPath);
-  }
-}
diff --git a/src/commands/local/modules/in-memory-node/docker-compose-binary.yml b/src/commands/local/modules/in-memory-node/docker-compose-binary.yml
deleted file mode 100644
index 1f75f6b..0000000
--- a/src/commands/local/modules/in-memory-node/docker-compose-binary.yml
+++ /dev/null
@@ -1,26 +0,0 @@
-version: '3.2'
-
-services:
-  zksync:
-    platform: linux/amd64
-    build:
-      dockerfile_inline: |
-        FROM ubuntu:latest
-        WORKDIR /app
-        RUN apt-get update \
-          && apt-get install -y curl jq \
-          && apt-get clean \
-          && rm -rf /var/lib/apt/lists/*
-
-        # Download latest linux binary from github
-        RUN curl -s https://api.github.com/repos/matter-labs/era-test-node/releases | \
-          jq -r '.[] | select(any(.assets[]; .name | contains("x86_64-unknown-linux-gnu"))) | .assets[] | select(.name | contains("x86_64-unknown-linux-gnu")) | .browser_download_url' | \
-          head -n 1 | xargs -I {} curl -L -o era_test_node.tar.gz {}
-
-        # Download and setup the binary
-        RUN tar xz -f era_test_node.tar.gz -C /usr/local/bin/
-        RUN chmod +x /usr/local/bin/era_test_node
-        EXPOSE 8011
-        CMD ["era_test_node", "run"]
-    ports:
-      - "8011:8011"
diff --git a/src/commands/local/modules/in-memory-node/index.ts b/src/commands/local/modules/in-memory-node/index.ts
deleted file mode 100644
index 38bb85b..0000000
--- a/src/commands/local/modules/in-memory-node/index.ts
+++ /dev/null
@@ -1,59 +0,0 @@
-import chalk from "chalk";
-import path from "path";
-
-import { compose } from "../../../../utils/docker";
-import Logger from "../../../../utils/logger";
-import Module from "../Module";
-
-import type { Config } from "../../config";
-
-export default class SetupModule extends Module {
-  constructor(config: Config) {
-    super(
-      {
-        name: "In memory node",
-        description: "Quick startup, no persisted state, only L2 node",
-        key: "in-memory-node",
-        tags: ["node"],
-      },
-      config
-    );
-  }
-
-  composeFile = path.join(__dirname, "docker-compose-binary.yml");
-
-  async isInstalled() {
-    return (await compose.status(this.composeFile)).length ? true : false;
-  }
-
-  async install() {
-    await compose.create(this.composeFile);
-  }
-
-  async isRunning() {
-    return (await compose.status(this.composeFile)).some(({ isRunning }) => isRunning);
-  }
-
-  async start() {
-    await compose.up(this.composeFile);
-  }
-
-  async onStartCompleted() {
-    Logger.info(`${this.name} ready:`);
-    Logger.info(
-      chalk.blue(` - zkSync Node (L2):
-    - Chain ID: 260
-    - RPC URL: http://localhost:8011`),
-      { noFormat: true }
-    );
-    Logger.warn(" - Note: every restart will necessitate a reset of MetaMask's cached account data");
-  }
-
-  async stop() {
-    await compose.stop(this.composeFile);
-  }
-
-  async clean() {
-    await compose.down(this.composeFile);
-  }
-}
diff --git a/src/commands/local/modules/index.ts b/src/commands/local/modules/index.ts
index 423a38a..fd1251a 100644
--- a/src/commands/local/modules/index.ts
+++ b/src/commands/local/modules/index.ts
@@ -1,40 +1,26 @@
-import BlockExplorer from "./block-explorer";
-import DockerizedNode from "./dockerized-node";
-import InMemoryNode from "./in-memory-node";
-import Portal from "./portal";
-import Logger from "../../../utils/logger";
+import chalk from "chalk";
 
-import type { Config } from "../config";
+import { getModulePackages } from "./utils/packages.js";
+import { track } from "../../../utils/analytics.js";
+import Logger from "../../../utils/logger.js";
+import Program from "../command.js";
 
-const getAllModules = (config?: Config) => {
-  const emptyConfig: Config = { modules: [] };
-  return [InMemoryNode, DockerizedNode, BlockExplorer, Portal].map((module) => new module(config ?? emptyConfig));
-};
-
-export const getModulesMeta = () => {
-  return getAllModules().map((module) => ({
-    name: module.name,
-    description: module.description,
-    key: module.key,
-    tags: module.tags,
-  }));
-};
-
-export const getConfigModules = (config: Config) => {
-  return getAllModules(config).filter((module) => config.modules.includes(module.key));
-};
-
-export const stopOtherNodes = async (config: Config, currentNodeKey: string) => {
-  const modules = getAllModules(config);
-  for (const module of modules) {
-    if (
-      module.tags.includes("node") &&
-      module.key !== currentNodeKey &&
-      (await module.isInstalled()) &&
-      (await module.isRunning())
-    ) {
-      Logger.info(`Stopping conflicting node "${module.name}"...`);
-      await module.stop();
+export const handler = async () => {
+  try {
+    const modules = await getModulePackages();
+    Logger.info("Installed modules:");
+    for (const module of modules) {
+      let logStr = `${module.name}${chalk.gray("@" + module.version)}`;
+      if (module.symlinked) {
+        logStr += chalk.blue(" (installed via --link)");
+      }
+      Logger.info(logStr, { noFormat: true });
     }
+  } catch (error) {
+    Logger.error("There was an error displaying installed modules:");
+    Logger.error(error);
+    track("error", { error });
   }
 };
+
+Program.command("modules").description("Displays list of installed modules").action(handler);
diff --git a/src/commands/local/modules/portal/docker-compose-dockerized-node.yml b/src/commands/local/modules/portal/docker-compose-dockerized-node.yml
deleted file mode 100644
index d57baf1..0000000
--- a/src/commands/local/modules/portal/docker-compose-dockerized-node.yml
+++ /dev/null
@@ -1,25 +0,0 @@
-version: '3.2'
-
-services:
-  portal-dockerized-node:
-    environment:
-      - NODE_TYPE=dockerized
-    build:
-      dockerfile_inline: |
-        # ---- Build Stage ----
-        FROM node:18-alpine AS build
-        WORKDIR /app
-        RUN apk add --no-cache python3 make g++ git
-        RUN git clone https://github.com/matter-labs/dapp-portal.git .
-        RUN npm ci
-        RUN npm run generate:node:docker
-
-        # ---- Serve Stage ----
-        FROM node:18-alpine AS serve
-        WORKDIR /app
-        RUN npm install -g serve
-        COPY --from=build /app/.output/public ./.output/public
-        EXPOSE 3000
-        CMD ["serve", "-s", ".output/public", "-p", "3000"]
-    ports:
-      - "3000:3000"
diff --git a/src/commands/local/modules/portal/docker-compose-in-memory-node.yml b/src/commands/local/modules/portal/docker-compose-in-memory-node.yml
deleted file mode 100644
index 9f5adab..0000000
--- a/src/commands/local/modules/portal/docker-compose-in-memory-node.yml
+++ /dev/null
@@ -1,25 +0,0 @@
-version: '3.2'
-
-services:
-  portal-in-memory-node:
-    environment:
-      - NODE_TYPE=memory
-    build:
-      dockerfile_inline: |
-        # ---- Build Stage ----
-        FROM node:18-alpine AS build
-        WORKDIR /app
-        RUN apk add --no-cache python3 make g++ git
-        RUN git clone https://github.com/matter-labs/dapp-portal.git .
-        RUN npm ci
-        RUN npm run generate:node:memory
-
-        # ---- Serve Stage ----
-        FROM node:18-alpine AS serve
-        WORKDIR /app
-        RUN npm install -g serve
-        COPY --from=build /app/.output/public ./.output/public
-        EXPOSE 3000
-        CMD ["serve", "-s", ".output/public", "-p", "3000"]
-    ports:
-      - "3000:3000"
diff --git a/src/commands/local/modules/portal/index.ts b/src/commands/local/modules/portal/index.ts
deleted file mode 100644
index 130cad0..0000000
--- a/src/commands/local/modules/portal/index.ts
+++ /dev/null
@@ -1,84 +0,0 @@
-import chalk from "chalk";
-import path from "path";
-
-import { compose } from "../../../../utils/docker";
-import Logger from "../../../../utils/logger";
-import Module from "../Module";
-
-import type { Config } from "../../config";
-
-export default class SetupModule extends Module {
-  constructor(config: Config) {
-    super(
-      {
-        name: "Portal",
-        description: "DApp with Wallet and Bridge functionality",
-        key: "portal",
-        tags: ["dapp"],
-      },
-      config
-    );
-  }
-
-  private composeFiles = {
-    "dockerized-node": path.join(__dirname, "docker-compose-dockerized-node.yml"),
-    "in-memory-node": path.join(__dirname, "docker-compose-in-memory-node.yml"),
-  };
-  get composeFile() {
-    return this.config.modules.some((module) => module === "in-memory-node")
-      ? this.composeFiles["in-memory-node"]
-      : this.composeFiles["dockerized-node"];
-  }
-
-  isContainerRunning = async () => {
-    const composeFileKey = Object.entries(this.composeFiles).find(([, composeFilePath]) => {
-      return composeFilePath === this.composeFile;
-    })![0];
-    const containers = await compose.status(this.composeFile);
-    for (const { name, isRunning } of containers) {
-      if (name.includes(composeFileKey)) {
-        return isRunning;
-      }
-    }
-    return undefined;
-  };
-
-  async isInstalled() {
-    return (await this.isContainerRunning()) === undefined ? false : true;
-  }
-
-  async install() {
-    await compose.create(this.composeFile);
-  }
-
-  async isRunning() {
-    return Boolean(await this.isContainerRunning());
-  }
-
-  async start() {
-    for (const composeFilePath of Object.values(this.composeFiles)) {
-      if (composeFilePath !== this.composeFile) {
-        await compose.stop(composeFilePath);
-      }
-    }
-    await compose.up(this.composeFile);
-  }
-
-  async onStartCompleted() {
-    Logger.info(`${this.name} ready:`);
-    let info = "";
-    info += " - Wallet: http://localhost:3000/";
-    if (this.composeFile === this.composeFiles["dockerized-node"]) {
-      info += "\n - Bridge: http://localhost:3000/bridge";
-    }
-    Logger.info(chalk.blue(info), { noFormat: true });
-  }
-
-  async stop() {
-    await Promise.all(Object.values(this.composeFiles).map((composeFilePath) => compose.stop(composeFilePath)));
-  }
-
-  async clean() {
-    await Promise.all(Object.values(this.composeFiles).map((composeFilePath) => compose.down(composeFilePath)));
-  }
-}
diff --git a/src/commands/local/modules/utils/packages.ts b/src/commands/local/modules/utils/packages.ts
new file mode 100644
index 0000000..19649e8
--- /dev/null
+++ b/src/commands/local/modules/utils/packages.ts
@@ -0,0 +1,100 @@
+import fs from "fs";
+import path from "path";
+
+import { fileOrDirExists, getLocalPath } from "../../../../utils/files.js";
+import Logger from "../../../../utils/logger.js";
+
+import type Module from "../Module.js";
+
+type Package = {
+  module: Module;
+  name: string;
+  version: string;
+  symlinked?: boolean;
+};
+
+export const modulesPath = getLocalPath("modules");
+
+const requireModule = async (modulePath: string): Promise<Module> => {
+  if (!fileOrDirExists(modulePath)) {
+    throw new Error(`Module at "${modulePath}" was not found`);
+  }
+  const module = await import(modulePath);
+  return module.default;
+};
+
+// when using `npm link` modules are not added to package.json but are symlinked in node_modules
+const findLinkedModules = async (): Promise<Package[]> => {
+  const packages: Package[] = [];
+
+  const nodeModulesPath = path.join(modulesPath, "node_modules");
+  const folders = fs.readdirSync(nodeModulesPath);
+
+  for (const folder of folders) {
+    const modulePath = path.join(nodeModulesPath, folder);
+    if (fs.lstatSync(modulePath).isSymbolicLink()) {
+      const modulePackagePath = path.join(modulePath, "package.json");
+      try {
+        const packageContent = fs.readFileSync(modulePackagePath, "utf-8");
+        const { name, version, main }: Package & { main: string } = JSON.parse(packageContent);
+        packages.push({
+          module: await requireModule(path.join(modulePath, main)),
+          name,
+          version,
+          symlinked: true,
+        });
+      } catch (error) {
+        Logger.error(`There was an error parsing linked module "${folder}"`);
+        Logger.error(error);
+      }
+    }
+  }
+  return packages;
+};
+
+const findInstalledModules = async (): Promise<Package[]> => {
+  const modulePackagePath = path.join(modulesPath, "package.json");
+
+  if (!fileOrDirExists(modulePackagePath)) {
+    return [];
+  }
+
+  const packageContent = fs.readFileSync(modulePackagePath, "utf-8");
+  const modulesPackage: { dependencies?: Record<Package["name"], Package["version"]> } = JSON.parse(packageContent);
+  if (!modulesPackage.dependencies) {
+    return [];
+  }
+  return (
+    await Promise.all(
+      Object.entries(modulesPackage.dependencies).map(async ([name]) => {
+        try {
+          const modulePath = path.join(modulesPath, "node_modules", name);
+          const modulePackagePath = path.join(modulePath, "package.json");
+          const packageContent = fs.readFileSync(modulePackagePath, "utf-8");
+          const { version, main }: Package & { main: string } = JSON.parse(packageContent);
+          return {
+            module: await requireModule(path.join(modulePath, main)),
+            name,
+            version,
+          };
+        } catch (error) {
+          Logger.error(`There was an error parsing installed module "${name}"`);
+          Logger.error(error);
+          return null;
+        }
+      })
+    )
+  ).filter((e) => !!e) as Package[];
+};
+
+export const getModulePackages = async (): Promise<Package[]> => {
+  try {
+    const installedModules = await findInstalledModules();
+    const linkedModules = await findLinkedModules();
+
+    return [...installedModules, ...linkedModules];
+  } catch (error) {
+    Logger.error("There was an error parsing modules");
+    throw error;
+  }
+};
diff --git a/src/commands/local/modules/utils/updates.ts b/src/commands/local/modules/utils/updates.ts
new file mode 100644
index 0000000..553acc4
--- /dev/null
+++ b/src/commands/local/modules/utils/updates.ts
@@ -0,0 +1,88 @@
+import fs from "fs";
+import path from "path";
+
+import { modulesPath } from "./packages.js";
+import { fileOrDirExists, writeFile } from "../../../../utils/files.js";
+import Logger from "../../../../utils/logger.js";
+
+import type Module from "../Module.js";
+
+type ModuleUpdatesInfo = {
+  [key: string]: {
+    current?: string;
+    latest?: string;
+    lastUpdateCheck: string;
+  };
+};
+
+const moduleUpdatesInfoPath = path.join(modulesPath, "updates.json");
+
+const getModuleUpdatesInfo = async (): Promise<ModuleUpdatesInfo> => {
+  if (!fileOrDirExists(moduleUpdatesInfoPath)) return {};
+
+  try {
+    const content = fs.readFileSync(moduleUpdatesInfoPath, "utf-8");
+    return JSON.parse(content);
+  } catch (error) {
+    Logger.error(`Error parsing module updates info: ${error}`);
+    throw error;
+  }
+};
+
+const checkModulesForUpdates = async (modules: Module[]): Promise<ModuleUpdatesInfo> => {
+  const moduleUpdatesInfo = await getModuleUpdatesInfo();
+  let hadChanges = false;
+
+  await Promise.all(
+    modules.map(async (module) => {
+      const moduleInfo = moduleUpdatesInfo[module.package.name];
+      if (moduleInfo) {
+        const hoursSinceLastUpdate =
+          (new Date().getTime() - new Date(moduleInfo.lastUpdateCheck).getTime()) / (1000 * 3600);
+        if (hoursSinceLastUpdate < 1) return;
+      }
+
+      try {
+        const currentVersion = module.version;
+        const latestVersion = await module.getLatestVersion();
+        if (
+          latestVersion &&
+          (latestVersion !== currentVersion ||
+            !moduleInfo ||
+            moduleInfo.latest !== latestVersion ||
+            moduleInfo.current !== currentVersion)
+        ) {
+          moduleUpdatesInfo[module.package.name] = {
+            current: currentVersion,
+            latest: latestVersion,
+            lastUpdateCheck: new Date().toISOString(),
+          };
+          hadChanges = true;
+        }
+      } catch (error) {
+        Logger.error(`There was an error while checking for updates for module "${module.name}":`);
+        Logger.error(error);
+      }
+    })
+  );
+
+  if (hadChanges) {
+    writeFile(moduleUpdatesInfoPath, JSON.stringify(moduleUpdatesInfo, null, 2));
+  }
+
+  return moduleUpdatesInfo;
+};
+
+export const getModulesRequiringUpdates = async (modules: Module[]) => {
+  const installedModules = await Promise.all(modules.filter((module) => module.isInstalled()));
+  const updateInfo = await checkModulesForUpdates(installedModules);
+
+  return installedModules
+    .map((module) => ({
+      module,
+      currentVersion: module.version,
+      latestVersion: updateInfo[module.package.name]?.latest,
+      requiresUpdate: module.version !== updateInfo[module.package.name]?.latest,
+    }))
+    .filter((e) => e.requiresUpdate);
+};
diff --git a/src/commands/local/restart.ts b/src/commands/local/restart.ts
index b71a6f7..6b0fe0d 100644
--- a/src/commands/local/restart.ts
+++ b/src/commands/local/restart.ts
@@ -1,9 +1,8 @@
-import { handler as start } from "./start";
-import { handler as stop } from "./stop";
-import { track } from "../../utils/analytics";
-import Logger from "../../utils/logger";
-
-import { local } from ".";
+import Program from "./command.js";
+import { handler as start } from "./start.js";
+import { handler as stop } from "./stop.js";
+import { track } from "../../utils/analytics.js";
+import Logger from "../../utils/logger.js";
 
 export const handler = async () => {
   try {
@@ -16,4 +15,4 @@ export const handler = async () => {
   }
 };
 
-local.command("restart").description("Restarts the local zkSync environment and modules").action(handler);
+Program.command("restart").description("Restarts the local zkSync environment and modules").action(handler);
diff --git a/src/commands/local/start.ts b/src/commands/local/start.ts
index c900490..78e0c82 100644
--- a/src/commands/local/start.ts
+++ b/src/commands/local/start.ts
@@ -1,11 +1,15 @@
-import { configExists, getConfig, handler as setupConfig } from "./config";
-import { getConfigModules, stopOtherNodes } from "./modules";
-import { track } from "../../utils/analytics";
-import Logger from "../../utils/logger";
+import chalk from "chalk";
 
-import { local } from "./";
+import Program from "./command.js";
+import { handler as setupConfig } from "./config.js";
+import configHandler from "./ConfigHandler.js";
+import { ModuleCategory } from "./modules/Module.js";
+import { getModulesRequiringUpdates } from "./modules/utils/updates.js";
+import { track } from "../../utils/analytics.js";
+import { formatLogs } from "../../utils/formatters.js";
+import Logger from "../../utils/logger.js";
 
-import type Module from "./modules/Module";
+import type Module from "./modules/Module.js";
 
 const installModules = async (modules: Module[]) => {
   for (const module of modules) {
@@ -23,29 +27,78 @@ const startModules = async (modules: Module[]) => {
   await Promise.all(modules.map((m) => m.start()));
 };
 
-const triggerOnCompleted = async (modules: Module[]) => {
-  Logger.info("\n");
+const stopOtherNodes = async (currentModules: Module[]) => {
+  const modules = await configHandler.getAllModules();
+  const currentNodeKeys = currentModules.filter((e) => e.category === ModuleCategory.Node).map((m) => m.package.name);
+
+  for (const module of modules) {
+    if (
+      module.category === ModuleCategory.Node &&
+      !currentNodeKeys.includes(module.package.name) &&
+      (await module.isInstalled()) &&
+      (await module.isRunning())
+    ) {
+      Logger.info(`Stopping conflicting node "${module.name}"...`);
+      await module.stop();
+    }
+  }
+};
+
+const checkForUpdates = async (modules: Module[]) => {
+  const modulesRequiringUpdates = await getModulesRequiringUpdates(modules);
+  if (!modulesRequiringUpdates.length) {
+    return;
+  }
+
+  Logger.info(chalk.yellow("\nModule updates available:"));
+  for (const { module, currentVersion, latestVersion } of modulesRequiringUpdates) {
+    let str = `${module.name}: ${latestVersion}`;
+    if (currentVersion) {
+      str += chalk.gray(` (current: ${currentVersion})`);
+    }
+    str += chalk.gray(` - zksync-cli local update ${module.package.name}`);
+    Logger.info(str);
+  }
+};
+
+const showStartupInfo = async (modules: Module[]) => {
+  Logger.info("");
   for (const module of modules) {
-    await module.onStartCompleted();
+    const startupInfo = await module.getStartupInfo();
+    let startedStr = chalk.magentaBright(`${module.name} started`);
+    const moduleVersion = module.version;
+    if (moduleVersion) {
+      startedStr += chalk.gray(` ${moduleVersion}`);
+    }
+    if (!startupInfo.length) {
+      Logger.info(`${startedStr}`);
+      continue;
+    }
+
+    Logger.info(`${startedStr}:`);
+    Logger.info(formatLogs(startupInfo, " "));
   }
 };
 
 export const handler = async () => {
   try {
-    if (!configExists()) {
+    if (!configHandler.configExists) {
       await setupConfig();
       Logger.info("");
     }
 
-    const config = getConfig();
-    Logger.debug(`Local config: ${JSON.stringify(config, null, 2)}`);
-
-    const modules = getConfigModules(config);
+    const modules = await configHandler.getConfigModules();
+    if (!modules.length) {
+      Logger.warn("Config does not contain any installed modules.");
+      Logger.warn("Run `zksync-cli local config` to select which modules to use.");
+      return;
+    }
 
     await installModules(modules);
-    await stopOtherNodes(config, modules.find((module) => module.tags.includes("node"))!.key);
+    await stopOtherNodes(modules);
     await startModules(modules);
-    await triggerOnCompleted(modules);
+    await checkForUpdates(modules);
+    await showStartupInfo(modules);
   } catch (error) {
     Logger.error("There was an error while starting the testing environment:");
     Logger.error(error);
@@ -53,4 +106,4 @@ export const handler = async () => {
   }
 };
 
-local.command("start").description("Starts the local zkSync environment and modules").action(handler);
+Program.command("start").description("Starts the local zkSync environment and modules").action(handler);
diff --git a/src/commands/local/stop.ts b/src/commands/local/stop.ts
index dc2ef56..de888a5 100644
--- a/src/commands/local/stop.ts
+++ b/src/commands/local/stop.ts
@@ -1,16 +1,11 @@
-import { getConfig } from "./config";
-import { getConfigModules } from "./modules";
-import { track } from "../../utils/analytics";
-import Logger from "../../utils/logger";
-
-import { local } from ".";
+import Program from "./command.js";
+import configHandler from "./ConfigHandler.js";
+import { track } from "../../utils/analytics.js";
+import Logger from "../../utils/logger.js";
 
 export const handler = async () => {
   try {
-    const config = getConfig();
-    Logger.debug(`Local config: ${JSON.stringify(config, null, 2)}`);
-
-    const modules = getConfigModules(config);
+    const modules = await configHandler.getConfigModules();
     Logger.info(`Stopping: ${modules.map((m) => m.name).join(", ")}...`);
     await Promise.all(modules.map((m) => m.isInstalled().then((installed) => (installed ? m.stop() : undefined))));
   } catch (error) {
@@ -20,4 +15,4 @@ export const handler = async () => {
   }
 };
 
-local.command("stop").description("Stops the local zkSync environment and modules").action(handler);
+Program.command("stop").description("Stops the local zkSync environment and modules").action(handler);
diff --git a/src/commands/local/uninstall.ts b/src/commands/local/uninstall.ts
new file mode 100644
index 0000000..cb1fa63
--- /dev/null
+++ b/src/commands/local/uninstall.ts
@@ -0,0 +1,36 @@
+import { Option } from "commander";
+
+import { cleanModule } from "./clean.js";
+import Program from "./command.js";
+import configHandler from "./ConfigHandler.js";
+import { modulesPath } from "./modules/utils/packages.js";
+import { track } from "../../utils/analytics.js";
+import { executeCommand } from "../../utils/helpers.js";
+import Logger from "../../utils/logger.js";
+
+const unlinkOption = new Option(
+  "--unlink",
+  "Use `npm unlink` instead of `npm uninstall` (useful during module development)"
+);
+
+export const handler = async (moduleNames: string[], options: { unlink: boolean }) => {
+  try {
+    const modules = await configHandler.getAllModules();
+    await Promise.all(modules.filter((e) => moduleNames.includes(e.package.name)).map((module) => cleanModule(module)));
+
+    const command = options.unlink ? "npm unlink" : "npm uninstall";
+    const fullCommand = `${command}${moduleNames.length ? ` ${moduleNames.join(" ")}` : ""}`;
+
+    await executeCommand(fullCommand, { cwd: modulesPath });
+  } catch (error) {
+    Logger.error("There was an error while uninstalling module:");
+    Logger.error(error);
+    track("error", { error });
+  }
+};
+
+Program.command("uninstall")
+  .argument("[module...]", "NPM package name of the module to uninstall")
+  .description("Uninstall module with NPM")
+  .addOption(unlinkOption)
+  .action(handler);
diff --git a/src/commands/local/update.ts b/src/commands/local/update.ts
new file mode 100644
index 0000000..00a2873
--- /dev/null
+++ b/src/commands/local/update.ts
@@ -0,0 +1,70 @@
+import { Option } from "commander";
+
+import Program from "./command.js";
+import configHandler from "./ConfigHandler.js";
+import { modulesPath } from "./modules/utils/packages.js";
+import { track } from "../../utils/analytics.js";
+import { executeCommand } from "../../utils/helpers.js";
+import Logger from "../../utils/logger.js";
+
+const packageOption = new Option("--package", "Update NPM package instead of module");
+
+type ModuleUpdateOptions = {
+  package?: boolean;
+};
+
+export const handler = async (moduleNames: string[], options: ModuleUpdateOptions = {}) => {
+  try {
+    if (options.package) {
+      Logger.info(`Updating NPM packages: ${moduleNames.join(", ")}`);
+      const fullCommand = `npm update${moduleNames.length ? ` ${moduleNames.join(" ")}` : ""}`;
+
+      await executeCommand(fullCommand, { cwd: modulesPath });
+    } else {
+      if (moduleNames.length > 1) {
+        Logger.info(`Modules to update: ${moduleNames.join(", ")}`);
+      }
+      const modules = await configHandler.getAllModules();
+      for (const moduleName of moduleNames) {
+        Logger.info("");
+        const module = modules.find((module) => module.package.name === moduleName);
+        if (!module) {
+          Logger.error(`Module "${moduleName}" is not installed`);
+          continue;
+        }
+
+        try {
+          const currentVersion = module.version;
+          const latestVersion = await module.getLatestVersion();
+
+          if (currentVersion === latestVersion) {
+            Logger.info(`Module "${moduleName}" is already up to date`);
+            continue;
+          } else if (!latestVersion) {
+            Logger.error(`Latest version wasn't found for module "${moduleName}"`);
+            continue;
+          }
+
+          Logger.info(
+            `Updating module "${moduleName}"${currentVersion && " from " + currentVersion} to ${latestVersion}`
+          );
+          await module.update();
+        } catch (error) {
+          Logger.error(`There was an error while updating module "${moduleName}":`);
+          Logger.error(error);
+          continue;
+        }
+      }
+    }
+  } catch (error) {
+    Logger.error("There was an error while updating module:");
+    Logger.error(error);
+    track("error", { error });
+  }
+};
+
+Program.command("update")
+  .argument("[module...]", "NPM package name of the module to update")
+  .description("Update installed module")
+  .addOption(packageOption)
+  .action(handler);
diff --git a/src/commands/withdraw-finalize.ts b/src/commands/withdraw-finalize.ts
index afdd9b2..e789656 100644
--- a/src/commands/withdraw-finalize.ts
+++ b/src/commands/withdraw-finalize.ts
@@ -1,23 +1,23 @@
 import { Option } from "commander";
-import { prompt } from "inquirer";
+import inquirer from "inquirer";
 
-import { chainOption, l1RpcUrlOption, l2RpcUrlOption, privateKeyOption, zeekOption } from "../common/options";
-import { l2Chains } from "../data/chains";
-import Program from "../program";
-import { track } from "../utils/analytics";
-import { bigNumberToDecimal } from "../utils/formatters";
+import { chainOption, l1RpcUrlOption, l2RpcUrlOption, privateKeyOption, zeekOption } from "../common/options.js";
+import { l2Chains } from "../data/chains.js";
+import Program from "../program.js";
+import { track } from "../utils/analytics.js";
+import { bigNumberToDecimal } from "../utils/formatters.js";
 import {
   getAddressFromPrivateKey,
   getL1Provider,
   getL2Provider,
   getL2Wallet,
   optionNameToParam,
-} from "../utils/helpers";
-import Logger from "../utils/logger";
-import { isPrivateKey, isTransactionHash } from "../utils/validators";
-import zeek from "../utils/zeek";
+} from "../utils/helpers.js";
+import Logger from "../utils/logger.js";
+import { isPrivateKey, isTransactionHash } from "../utils/validators.js";
+import zeek from "../utils/zeek.js";
 
-import type { DefaultTransactionOptions } from "../common/options";
+import type { DefaultTransactionOptions } from "../common/options.js";
 
 const transactionHashOption = new Option("--hash <transaction_hash>", "L2 withdrawal transaction hash to finalize");
 
@@ -35,7 +35,7 @@ export const handler = async (options: WithdrawFinalizeOptions) => {
       )}`
     );
 
-    const answers: WithdrawFinalizeOptions = await prompt(
+    const answers: WithdrawFinalizeOptions = await inquirer.prompt(
       [
         {
           message: chainOption.description,
diff --git a/src/commands/withdraw.ts b/src/commands/withdraw.ts
index aebeacc..fd14850 100644
--- a/src/commands/withdraw.ts
+++ b/src/commands/withdraw.ts
@@ -1,4 +1,4 @@
-import { prompt } from "inquirer";
+import inquirer from "inquirer";
 
 import {
   amountOptionCreate,
@@ -8,24 +8,24 @@ import {
   privateKeyOption,
   recipientOptionCreate,
   zeekOption,
-} from "../common/options";
-import { l2Chains } from "../data/chains";
-import Program from "../program";
-import { track } from "../utils/analytics";
-import { ETH_TOKEN } from "../utils/constants";
-import { bigNumberToDecimal, decimalToBigNumber } from "../utils/formatters";
+} from "../common/options.js";
+import { l2Chains } from "../data/chains.js";
+import Program from "../program.js";
+import { track } from "../utils/analytics.js";
+import { ETH_TOKEN } from "../utils/constants.js";
+import { bigNumberToDecimal, decimalToBigNumber } from "../utils/formatters.js";
 import {
   getAddressFromPrivateKey,
   getL1Provider,
   getL2Provider,
   getL2Wallet,
   optionNameToParam,
-} from "../utils/helpers";
-import Logger from "../utils/logger";
-import { isDecimalAmount, isAddress, isPrivateKey } from "../utils/validators";
-import zeek from "../utils/zeek";
+} from "../utils/helpers.js";
+import Logger from "../utils/logger.js";
+import { isDecimalAmount, isAddress, isPrivateKey } from "../utils/validators.js";
+import zeek from "../utils/zeek.js";
 
-import type { DefaultTransferOptions } from "../common/options";
+import type { DefaultTransferOptions } from "../common/options.js";
 
 const amountOption = amountOptionCreate("withdraw");
 const recipientOption = recipientOptionCreate("L1");
@@ -42,7 +42,7 @@ export const handler = async (options: WithdrawOptions) => {
       )}`
     );
 
-    const answers: WithdrawOptions = await prompt(
+    const answers: WithdrawOptions = await inquirer.prompt(
       [
         {
           message: chainOption.description,
diff --git a/src/common/options.ts b/src/common/options.ts
index c8b7df1..87fe64b 100644
--- a/src/common/options.ts
+++ b/src/common/options.ts
@@ -1,6 +1,6 @@
 import { Option } from "commander";
 
-import { l2Chains } from "../data/chains";
+import { l2Chains } from "../data/chains.js";
 
 export const chainOption = new Option("--c, --chain <chain>", "Chain to use").choices(
   l2Chains.filter((e) => e.l1Chain).map((chain) => chain.network)
diff --git a/src/index.ts b/src/index.ts
index 2ca1c8a..90b97c4 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,10 +1,10 @@
 #! /usr/bin/env node
-import Program from "./program";
+import Program from "./program.js";
 
-import "./commands/deposit";
-import "./commands/withdraw";
-import "./commands/withdraw-finalize";
-import "./commands/create-project";
-import "./commands/local";
+import "./commands/local/index.js";
+import "./commands/deposit.js";
+import "./commands/withdraw.js";
+import "./commands/withdraw-finalize.js";
+import "./commands/create-project.js";
 
 Program.parse();
diff --git a/src/lib/index.ts b/src/lib/index.ts
new file mode 100644
index 0000000..b6c58d4
--- /dev/null
+++ b/src/lib/index.ts
@@ -0,0 +1,13 @@
+import Module, { ModuleCategory, ModuleNode } from "../commands/local/modules/Module.js";
+import * as docker from "../utils/docker.js";
+import * as files from "../utils/files.js";
+import * as git from "../utils/git.js";
+import * as helpers from "../utils/helpers.js";
+import Logger from "../utils/logger.js";
+
+import type { ConfigHandler } from "../commands/local/ConfigHandler.js";
+import type { DefaultModuleFields, NodeInfo } from "../commands/local/modules/Module.js";
+import type { LogEntry } from "../utils/formatters.js";
+
+export { Module, ModuleNode, ModuleCategory, Logger, docker, git, files, helpers };
+export type { ConfigHandler, NodeInfo, DefaultModuleFields, LogEntry };
diff --git a/src/program.ts b/src/program.ts
index e6e9792..9b20a8b 100644
--- a/src/program.ts
+++ b/src/program.ts
@@ -1,8 +1,14 @@
 import { Command } from "commander";
+import { readFileSync } from "fs";
+import path from "path";
 
-// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-// @ts-ignore
-import Package from "../package.json";
+import { getDirPath } from "./utils/files.js";
+
+const Package: {
+  name: string;
+  description: string;
+  version: string;
+} = JSON.parse(readFileSync(path.join(getDirPath(import.meta.url), "../package.json"), "utf-8"));
 
 const program = new Command();
 program.name(Package.name).description(Package.description).version(Package.version).showHelpAfterError();
diff --git a/src/test-utils/global.d.ts b/src/test-utils/global.d.ts
deleted file mode 100644
index 550a36b..0000000
--- a/src/test-utils/global.d.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-declare global {
-  namespace jest {
-    interface Matchers<R> {
-      hasConsoleErrors(): R;
-      toBeInConsole(value: string): R;
-    }
-  }
-}
-
-// This makes TypeScript treat this file as a module
-export {};
diff --git a/src/test-utils/requestInterceptor.ts b/src/test-utils/requestInterceptor.ts
index efde724..3d1b815 100644
--- a/src/test-utils/requestInterceptor.ts
+++ b/src/test-utils/requestInterceptor.ts
@@ -1,4 +1,5 @@
 import { setupServer } from "msw/node";
+import { getDirPath } from "../utils/files.js";
 
 const server = setupServer();
 
@@ -6,7 +7,7 @@ const unexpectedRequests: { [file: string]: { [testName: string]: { method: stri
 
 beforeEach(function () {
   const testState = expect.getState();
-  const testPath = testState.testPath?.slice(__dirname.length, -3) || "unknown location";
+  const testPath = testState.testPath?.slice(getDirPath(import.meta.url).length, -3) || "unknown location";
   const testName = testState.currentTestName || "unknown test name";
 
   server.listen({
diff --git a/src/utils/analytics.spec.ts b/src/utils/analytics.spec.ts
index 81dd86f..d7025f7 100644
--- a/src/utils/analytics.spec.ts
+++ b/src/utils/analytics.spec.ts
@@ -1,7 +1,7 @@
 import RudderAnalytics from "@rudderstack/rudder-sdk-node";
 import { machineId } from "node-machine-id";
 
-import { track } from "./analytics";
+import { track } from "./analytics.js";
 
 jest.mock("@rudderstack/rudder-sdk-node");
 jest.mock("dotenv");
diff --git a/src/utils/analytics.ts b/src/utils/analytics.ts
index 388a5be..2459282 100644
--- a/src/utils/analytics.ts
+++ b/src/utils/analytics.ts
@@ -1,19 +1,21 @@
 import RudderAnalytics from "@rudderstack/rudder-sdk-node";
-import dotenv from "dotenv";
-import { machineId } from "node-machine-id";
+import { config } from "dotenv";
+import machine from "node-machine-id";
 import path from "path";
 
+import { getDirPath } from "./files.js";
+
 import type { apiObject } from "@rudderstack/rudder-sdk-node";
 
-const envPath = path.join(__dirname, "../../", ".env-public-analytics");
-dotenv.config({ path: envPath });
+const envPath = path.join(getDirPath(import.meta.url), "../../", ".env-public-analytics");
+config({ path: envPath });
 
-let client: RudderAnalytics | undefined;
+let client: RudderAnalytics.default | undefined;
 
 const getClient = () => {
   if (!client) {
     try {
-      client = new RudderAnalytics(process.env.RUDDER_STACK_KEY!, {
+      client = new RudderAnalytics.default(process.env.RUDDER_STACK_KEY!, {
         dataPlaneUrl: process.env.RUDDER_STACK_DATAPLANE_URL!,
         logLevel: "error",
       });
@@ -35,7 +37,7 @@ export const track = async (event: string, properties?: unknown) => {
     }, 1000);
     clientInstance!.track(
       {
-        userId: await machineId(),
+        userId: await machine.machineId(),
         event,
         properties: properties as apiObject,
       },
diff --git a/src/utils/constants.ts b/src/utils/constants.ts
index 2708ef3..a643198 100644
--- a/src/utils/constants.ts
+++ b/src/utils/constants.ts
@@ -1,5 +1,5 @@
-import { getAddress } from "ethers/lib/utils";
-import { L2_ETH_TOKEN_ADDRESS } from "zksync-web3/build/src/utils";
+import { getAddress } from "ethers/lib/utils.js";
+import { L2_ETH_TOKEN_ADDRESS } from "zksync-web3/build/src/utils.js";
 
 export const ETH_TOKEN = {
   symbol: "ETH",
diff --git a/src/utils/docker.ts b/src/utils/docker.ts
index b153b35..a86e5c8 100644
--- a/src/utils/docker.ts
+++ b/src/utils/docker.ts
@@ -1,7 +1,7 @@
 import path from "path";
 
-import { executeCommand } from "./helpers";
-import Logger from "./logger";
+import { executeCommand } from "./helpers.js";
+import Logger from "./logger.js";
 
 let dockerInstalled = false;
 
@@ -18,12 +18,22 @@ const checkDockerInstallation = async () => {
 const getComposeCommandBase = (dockerComposePath: string, projectDir?: string) => {
   return `docker compose -f ${dockerComposePath} --project-directory ${projectDir ?? path.dirname(dockerComposePath)}`;
 };
-const createComposeCommand = (action: string) => async (dockerComposePath: string, projectDir?: string) => {
-  await checkDockerInstallation();
-  return await executeCommand(`${getComposeCommandBase(dockerComposePath, projectDir)} ${action}`);
-};
+const createComposeCommand =
+  (action: string) => async (dockerComposePath: string, projectDir?: string, additionalArgs?: string[]) => {
+    await checkDockerInstallation();
+    const baseCommand = getComposeCommandBase(dockerComposePath, projectDir);
+    const args = additionalArgs ? `${additionalArgs.join(" ")}` : "";
+    return await executeCommand(`${baseCommand} ${action} ${args}`.trim());
+  };
 
-type ContainerStatus = "running" | "exited" | "paused" | "restarting" | "dead" | "unknown";
+enum ContainerStatus {
+  Running = "running",
+  Exited = "exited",
+  Paused = "paused",
+  Restarting = "restarting",
+  Dead = "dead",
+  Unknown = "unknown",
+}
 type Container = { Name: string; State: ContainerStatus };
 interface ContainerInfo {
   name: string;
@@ -35,11 +45,13 @@ export const composeStatus = async (dockerComposePath: string, projectDir?: stri
     await executeCommand(`${getComposeCommandBase(dockerComposePath, projectDir)} ps --format json --all`, {
       silent: true,
     })
-  ).trim();
+  ).trim(); // trim to remove leading and trailing whitespace
 
+  // if no containers are mounted, docker compose returns an empty string
   if (!statusJson.length) {
     return [];
   }
+  // on windows, docker compose returns json objects separated by newlines
   if (statusJson.startsWith("{") && statusJson.endsWith("}")) {
     statusJson = "[" + statusJson.split("\n").join(",") + "]";
   }
@@ -49,7 +61,7 @@ export const composeStatus = async (dockerComposePath: string, projectDir?: stri
 
     return containers.map((container) => ({
       name: container.Name,
-      isRunning: container.State === "running" || container.State === "restarting",
+      isRunning: container.State === ContainerStatus.Running || container.State === ContainerStatus.Restarting,
     }));
   } catch (error) {
     Logger.debug(`Failed to JSON.parse compose status ${dockerComposePath}: ${error?.toString()}`);
@@ -59,9 +71,10 @@ export const composeStatus = async (dockerComposePath: string, projectDir?: stri
 };
 
 export const compose = {
+  build: createComposeCommand("build"),
   create: createComposeCommand("create"),
   up: createComposeCommand("up -d"),
   stop: createComposeCommand("stop"),
-  down: createComposeCommand("down"),
+  down: createComposeCommand("down --rmi all --volumes --remove-orphans"),
   status: composeStatus,
 };
diff --git a/src/utils/files.ts b/src/utils/files.ts
index d9e5cff..699d564 100644
--- a/src/utils/files.ts
+++ b/src/utils/files.ts
@@ -1,6 +1,7 @@
 import fs from "fs";
 import { homedir } from "os";
 import path from "path";
+import { fileURLToPath } from "url";
 
 const getUserDirectory = () => {
   // From the XDG Base Directory Specification:
@@ -14,8 +15,13 @@ export const getLocalPath = (...filePath: string[]) => {
   return path.join(getUserDirectory(), ...filePath);
 };
 
-export const fileOrDirExists = (destination: string) => {
-  return fs.existsSync(destination);
+export const fileOrDirExists = (...filePath: string[]) => {
+  return fs.existsSync(path.join(...filePath));
+};
+
+export const getDirPath = (filePath: string) => {
+  const filename = fileURLToPath(filePath);
+  return path.dirname(filename);
 };
 
 export const writeFile = (filePath: string, data: string | NodeJS.ArrayBufferView) => {
@@ -26,5 +32,5 @@ export const writeFile = (filePath: string, data: string | NodeJS.ArrayBufferVie
   }
 
   // Then write file
-  fs.writeFileSync(filePath, data);
+  fs.writeFileSync(filePath, data, "utf-8");
 };
diff --git a/src/utils/formatters.ts b/src/utils/formatters.ts
index 5e2d26e..59fbf3e 100644
--- a/src/utils/formatters.ts
+++ b/src/utils/formatters.ts
@@ -1,8 +1,10 @@
-import { formatUnits, parseUnits } from "ethers/lib/utils";
+import chalk from "chalk";
+import { formatUnits, parseUnits } from "ethers/lib/utils.js";
 
-import { ETH_TOKEN } from "../utils/constants";
+import { hasColor } from "./helpers.js";
+import { ETH_TOKEN } from "../utils/constants.js";
 
-import type { BigNumberish } from "ethers/lib/ethers";
+import type { BigNumberish } from "ethers/lib/ethers.js";
 
 export function decimalToBigNumber(amount: string, decimals = ETH_TOKEN.decimals) {
   return parseUnits(amount, decimals);
@@ -15,3 +17,36 @@ export function bigNumberToDecimal(amount: BigNumberish, decimals = ETH_TOKEN.de
   }
   return result;
 }
+
+export type LogEntry =
+  | string
+  | {
+      text: string;
+      list?: LogEntry[];
+    };
+
+const formatLogEntry = (entry: LogEntry, indentation = "", defaultColor = chalk.blue): string => {
+  function formatString(text: string): string {
+    if (!text.trimStart().startsWith("-")) {
+      text = `- ${text}`;
+    }
+    return `${indentation}${hasColor(text) ? text : defaultColor(text)}`;
+  }
+
+  if (typeof entry === "string") {
+    return formatString(entry);
+  } else {
+    const { text, list } = entry;
+    const formattedText = formatString(text);
+    if (list && list.length > 0) {
+      const subEntries = list.map((item) => formatLogEntry(item, indentation + " ", defaultColor)).join("\n");
+      return `${formattedText}\n${subEntries}`;
+    } else {
+      return formattedText;
+    }
+  }
+};
+
+export const formatLogs = (logs: LogEntry[], indentation = "", defaultColor = chalk.blue): string => {
+  return logs.map((entry) => formatLogEntry(entry, indentation, defaultColor)).join("\n");
+};
diff --git a/src/utils/git.ts b/src/utils/git.ts
index b251771..818a8b6 100644
--- a/src/utils/git.ts
+++ b/src/utils/git.ts
@@ -1,6 +1,6 @@
-import { fileOrDirExists } from "./files";
-import { executeCommand } from "./helpers";
-import Logger from "./logger";
+import { fileOrDirExists } from "./files.js";
+import { executeCommand } from "./helpers.js";
+import Logger from "./logger.js";
 
 let gitInstalled = false;
 
diff --git a/src/utils/helpers.ts b/src/utils/helpers.ts
index 021414a..07d5bf2 100644
--- a/src/utils/helpers.ts
+++ b/src/utils/helpers.ts
@@ -1,6 +1,6 @@
 import { spawn } from "child_process";
 import { ethers } from "ethers";
-import { computeAddress } from "ethers/lib/utils";
+import { computeAddress } from "ethers/lib/utils.js";
 import { Wallet, Provider } from "zksync-web3";
 
 export const optionNameToParam = (input: string): string => {
@@ -31,12 +31,13 @@ export const getL2Wallet = (privateKey: string, l2Provider: Provider, l1Provider
 
 interface ExecuteOptions {
   silent?: boolean;
+  cwd?: string;
 }
 export const executeCommand = (command: string, options: ExecuteOptions = {}): Promise<string> => {
   return new Promise((resolve, reject) => {
     const [cmd, ...args] = command.split(" ");
 
-    const child = spawn(cmd, args, { stdio: options.silent ? "pipe" : "inherit" });
+    const child = spawn(cmd, args, { stdio: options.silent ? "pipe" : "inherit", cwd: options.cwd });
     let output = "";
     let errorOutput = "";
 
@@ -69,3 +70,9 @@ export const executeCommand = (command: string, options: ExecuteOptions = {}): P
     });
   });
 };
+
+export const hasColor = (text: string): boolean => {
+  // eslint-disable-next-line no-control-regex
+  const colorEscapeCodePattern = /\x1B\[\d+m/g;
+  return colorEscapeCodePattern.test(text);
+};
diff --git a/src/utils/logger.ts b/src/utils/logger.ts
index af92079..35e3d35 100644
--- a/src/utils/logger.ts
+++ b/src/utils/logger.ts
@@ -1,10 +1,12 @@
 import chalk from "chalk";
 import { format, createLogger, transports } from "winston";
 
+import { hasColor } from "./helpers.js";
+
 export const errorSymbol = "ⓘ"; // used in ../test-utils/matchers.ts to check for errors in console output
 
 const styleLogs = format.printf((info) => {
-  if (info.noFormat) {
+  if (hasColor(info.message)) {
     return info.message;
   }
   if (info.level === "error") {
diff --git a/src/utils/validators.ts b/src/utils/validators.ts
index 63aed28..0d526c1 100644
--- a/src/utils/validators.ts
+++ b/src/utils/validators.ts
@@ -1,8 +1,8 @@
 import { BigNumber, Wallet } from "ethers";
-import { getAddress } from "ethers/lib/utils";
+import { getAddress } from "ethers/lib/utils.js";
 
-import { ETH_TOKEN } from "./constants";
-import { decimalToBigNumber } from "./formatters";
+import { ETH_TOKEN } from "./constants.js";
+import { decimalToBigNumber } from "./formatters.js";
 
 export const isDecimalAmount = (amount: string, decimals = ETH_TOKEN.decimals) => {
   try {
diff --git a/src/utils/zeek.ts b/src/utils/zeek.ts
index cc5dcee..8592ed6 100644
--- a/src/utils/zeek.ts
+++ b/src/utils/zeek.ts
@@ -1,7 +1,7 @@
 import axios from "axios";
 import chalk from "chalk";
 
-import Logger from "./logger";
+import Logger from "./logger.js";
 
 export default async () => {
   const api_url = "https://zenquotes.io/api/random/";
diff --git a/tsconfig.build.json b/tsconfig.build.json
index f7b2b51..4c5d6cf 100644
--- a/tsconfig.build.json
+++ b/tsconfig.build.json
@@ -1,4 +1,8 @@
 {
+  "compilerOptions": {
+    "declaration": true,
+    "sourceMap": true
+  },
   "extends": "./tsconfig.json",
   "exclude": ["**/*.spec.ts", "./src/test-utils"]
 }
diff --git a/tsconfig.json b/tsconfig.json
index 7800849..7831c38 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,14 +1,12 @@
 {
   "compilerOptions": {
-    "target": "es6",
-    "module": "commonjs",
-    "lib": ["es6", "es2015", "dom"],
-    "declaration": true,
-    "outDir": "bin",
-    "rootDir": "src",
-    "strict": true,
-    "types": ["@types/jest", "node"],
+    "target": "ES2020",
+    "module": "NodeNext",
+    "moduleResolution": "NodeNext",
+    "outDir": "./bin",
+    "rootDir": "./src",
     "esModuleInterop": true,
+    "strict": true,
     "resolveJsonModule": true
   },
   "include": ["./src"],
